import os
import pandas as pd
import requests
import mplfinance as mpf
import matplotlib.pyplot as plt
from datetime import datetime, timedelta
from sqlalchemy.util import symbol

# csv_file = "tradingview_signals_server.csv"
# start_date = "2025-03-01"
# end_date = "2025-03-09"
# interval = "1h"  # Binance –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
#
# def download_klines_daily(symbol, interval, start_date, end_date):
#     start_date = datetime.strptime(start_date, '%Y-%m-%d')
#     end_date = datetime.strptime(end_date, '%Y-%m-%d')
#
#     klines = {
#         'Date': [], 'Open': [], 'High': [], 'Low': [], 'Close': [], 'Volume': [], 'Symbol': []
#     }
#
#     limit = 1500  # Binance API –ª–∏–º–∏—Ç –Ω–∞ 1 –∑–∞–ø—Ä–æ—Å
#     current_date = start_date
#
#     while current_date <= end_date:
#         start_time = int(current_date.timestamp() * 1000)
#         end_time = int(end_date.timestamp() * 1000)  # –û–∫–æ–Ω—á–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
#
#         url = f"https://api.binance.com/api/v3/klines?symbol={symbol}&interval={interval}&startTime={start_time}&endTime={end_time}&limit={limit}"
#
#         try:
#             r = requests.get(url)
#             r.raise_for_status()
#             data = r.json()
#             if not data:
#                 print(f"‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol} –≤ {current_date.strftime('%Y-%m-%d')}")
#                 break
#
#             for row in data:
#                 klines['Date'].append(datetime.fromtimestamp(row[0] / 1000, tz=timezone.utc))
#                 klines['Open'].append(float(row[1]))
#                 klines['High'].append(float(row[2]))
#                 klines['Low'].append(float(row[3]))
#                 klines['Close'].append(float(row[4]))
#                 klines['Volume'].append(float(row[5]))
#                 klines['Symbol'].append(symbol)
#
#             # –û–±–Ω–æ–≤–ª—è–µ–º `current_date`, –¥–≤–∏–≥–∞—è—Å—å –≤–ø–µ—Ä–µ–¥ –Ω–∞ `limit` –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
#             current_date += timedelta(hours=limit)
#             time.sleep(0.01)
#
#         except Exception as e:
#             print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ {symbol}: {e}")
#             break
#
#     if not klines['Date']:
#         print(f"‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol} –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ {start_date} - {end_date}")
#         return pd.DataFrame()
#
#     df = pd.DataFrame(klines)
#     df['Date'] = pd.to_datetime(df['Date'])
#     df.set_index('Date', inplace=True)
#
#     return df
#
# # === –ß–∏—Ç–∞–µ–º CSV –∏ –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ ===
# signals_df = pd.read_csv(csv_file)
# symbols = signals_df['symbol'].unique().tolist()  # –¢–µ–ø–µ—Ä—å —Å–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤
#
# # === –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤ ===
# dfs = []
# for symbol in symbols:
#     print(f"üì• –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è {symbol}...")
#     df = download_klines_daily(symbol, interval, start_date, end_date)
#     if not df.empty:
#         dfs.append(df)
#
# # === –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º ===
# if dfs:
#     df_all = pd.concat(dfs)
#     df_all.to_csv("klines_data.csv")
#     print(f"‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ klines_data.csv")
# else:
#     print("‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –Ω–µ –±—ã–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")




df = pd.read_csv("klines_data.csv", parse_dates=['Date'], index_col='Date')

# === –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ —Å–≤–µ—á–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞ ===
def plot_candlestick(df, symbol):
    df_symbol = df[df['Symbol'] == symbol].copy()

    # –£–±–∏—Ä–∞–µ–º –∫–æ–ª–æ–Ω–∫—É 'Symbol', —á—Ç–æ–±—ã –ø–µ—Ä–µ–¥–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π DataFrame –≤ mplfinance
    df_symbol = df_symbol.drop(columns=['Symbol'])

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä–∞—Ñ–∏–∫–∞
    mpf.plot(
        df_symbol,
        type='candle',  # –Ø–ø–æ–Ω—Å–∫–∏–µ —Å–≤–µ—á–∏
        style='charles',  # –°—Ç–∏–ª—å –≥—Ä–∞—Ñ–∏–∫–∞
        title=f"–°–≤–µ—á–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫ {symbol}",
        ylabel="–¶–µ–Ω–∞ (USDT)",
        volume=True,  # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±—ä–µ–º–∞
        figsize=(12, 6),
    )

# === –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ ===
symbols = df['Symbol'].unique()

# for symbol in symbols:
#     print(f"üìä –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è {symbol}...")
#     plot_candlestick(df, symbol)
#     plt.show()

# def save_candlestick_plot(df, symbol, interval):
#     df_symbol = df[df['Symbol'] == symbol].copy()
#     df_symbol = df_symbol.drop(columns=['Symbol'])  # –£–¥–∞–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É 'Symbol'
#
#     # –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫–∏, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
#     base_dir = "plots"
#     symbol_dir = os.path.join(base_dir, symbol)
#     timeframe_dir = os.path.join(symbol_dir, f"{symbol}_{interval}")
#
#     os.makedirs(timeframe_dir, exist_ok=True)
#
#     # –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
#     plot_path = os.path.join(timeframe_dir, f"{symbol}_{interval}.png")
#
#     # === –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ ===
#     fig, axlist = mpf.plot(
#         df_symbol,
#         type='candle',  # –Ø–ø–æ–Ω—Å–∫–∏–µ —Å–≤–µ—á–∏
#         style='charles',  # –°—Ç–∏–ª—å –≥—Ä–∞—Ñ–∏–∫–∞
#         title=f"–°–≤–µ—á–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫ {symbol}",
#         ylabel="–¶–µ–Ω–∞ (USDT)",
#         volume=True,  # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ä—ë–º
#         figsize=(12, 6),
#         returnfig=True  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–∏–≥—É—Ä—É –∏ –æ—Å–∏
#     )
#
#     # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
#     fig.savefig(plot_path)
#     plt.close(fig)
#     print(f"‚úÖ –ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {plot_path}")
#
#
# # === –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Å–∏–º–≤–æ–ª ===
# symbols = df['Symbol'].unique()
# interval = "1h"  # –£–∫–∞–∂–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ç–∞–π–º—Ñ—Ä–µ–π–º
#
# for symbol in symbols:
#     save_candlestick_plot(df, symbol, interval)


import os
import pandas as pd
import mplfinance as mpf
import matplotlib.pyplot as plt

import pandas as pd
import os
import matplotlib.pyplot as plt
import mplfinance as mpf

# === –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π ===
# df = pd.read_csv("klines_data.csv", parse_dates=['Date'], index_col='Date')
#
# # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –∏–Ω–¥–µ–∫—Å–∞ —Ç–∞–π–º–∑–æ–Ω–∞
# if df.index.tz is None:
#     df.index = df.index.tz_localize('UTC')
# else:
#     df.index = df.index.tz_convert('UTC')
#
# # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω—É–∂–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã –¥–ª—è mplfinance
# ohlc_columns = ['Open', 'High', 'Low', 'Close', 'Volume']
# if not all(col in df.columns for col in ohlc_columns):
#     raise ValueError("‚ùå –í DataFrame –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å—Ç–æ–ª–±—Ü—ã: 'Open', 'High', 'Low', 'Close', 'Volume'")
#
# # === –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ ===
# signals_df = pd.read_csv("tradingview_signals_server.csv", parse_dates=['utc_time'])
# signals_df.rename(columns={'utc_time': 'Date'}, inplace=True)
#
# # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–∞–π–º–∑–æ–Ω—É
# if signals_df['Date'].dt.tz is None:
#     signals_df['Date'] = signals_df['Date'].dt.tz_localize('UTC')
# else:
#     signals_df['Date'] = signals_df['Date'].dt.tz_convert('UTC')
#
#
# # === –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ —Å —Å–∏–≥–Ω–∞–ª–∞–º–∏ ===
# def save_candlestick_plot(df, signals_df, symbol, interval):
#     df_symbol = df[df['Symbol'] == symbol].copy()
#     df_symbol = df_symbol.drop(columns=['Symbol'])
#
#     # –û—Ç–±–∏—Ä–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã –ø–æ —Å–∏–º–≤–æ–ª—É –∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º—É
#     signals_filtered = signals_df[
#         (signals_df['symbol'] == symbol) &
#         (signals_df['timeframe'] == interval)
#     ].copy()
#
#     # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ —Ç–µ, —á—Ç–æ –ø–æ–ø–∞–¥–∞—é—Ç –≤ –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç —Å–≤–µ—á–µ–∫
#     signals_filtered = signals_filtered[signals_filtered['Date'].between(df_symbol.index.min(), df_symbol.index.max())]
#
#     if signals_filtered.empty:
#         print(f"‚ö†Ô∏è –ù–µ—Ç —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è {symbol} ({interval}) –≤ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.")
#         return
#     else:
#         print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(signals_filtered)} —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è {symbol} ({interval}).")
#
#     # –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
#     base_dir = "plots"
#     symbol_dir = os.path.join(base_dir, symbol)
#     timeframe_dir = os.path.join(symbol_dir, f"{symbol}_{interval}")
#     os.makedirs(timeframe_dir, exist_ok=True)
#
#     # –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
#     plot_path = os.path.join(timeframe_dir, f"{symbol}_{interval}.png")
#
#     # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —Å –¥–≤—É–º—è –ø–æ–¥–≥—Ä–∞—Ñ–∏–∫–∞–º–∏: —Å–≤–µ—á–∏ + –æ–±—ä–µ–º
#     fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(12, 8), gridspec_kw={'height_ratios': [3, 1]})
#
#     # –†–∏—Å—É–µ–º —Å–≤–µ—á–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫ + –æ–±—ä–µ–º
#     mpf.plot(df_symbol, type='candle', style='charles', ax=ax1, volume=ax2)
#
#     # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–∞ –≥—Ä–∞—Ñ–∏–∫
#     for _, row in signals_filtered.iterrows():
#         color = 'green' if row['signal'] == 'STRONG_BUY' else 'red'
#         marker = '^' if row['signal'] == 'STRONG_BUY' else 'v'
#         ax1.scatter(row['Date'], row['entry_price'], color=color, marker=marker, s=100)
#
#         # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å —Ä—è–¥–æ–º —Å —Å–∏–≥–Ω–∞–ª–æ–º
#         ax1.text(row['Date'], row['entry_price'], f"{row['entry_price']:.2f}",
#                  fontsize=10, verticalalignment='bottom' if row['signal'] == 'STRONG_BUY' else 'top',
#                  color=color, bbox=dict(facecolor='white', edgecolor=color, boxstyle='round,pad=0.3'))
#
#     # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
#     plt.savefig(plot_path)
#     plt.close()
#     print(f"‚úÖ –ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {plot_path}")
#
#
# # === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –¥–ª—è –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤ ===
# symbols = df['Symbol'].unique()
# interval = "1h"  # –£–∫–∞–∂–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ç–∞–π–º—Ñ—Ä–µ–π–º
#
# for symbol in symbols:
#     save_candlestick_plot(df, signals_df, symbol, interval)


import os
import pandas as pd
import matplotlib.pyplot as plt
import mplfinance as mpf

# === –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π ===
df = pd.read_csv("klines_data.csv", parse_dates=['Date'], index_col='Date')
df.index = pd.to_datetime(df.index, utc=True)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
ohlc_columns = ['Open', 'High', 'Low', 'Close', 'Volume']
if not all(col in df.columns for col in ohlc_columns):
    raise ValueError("‚ùå –í DataFrame –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å—Ç–æ–ª–±—Ü—ã: 'Open', 'High', 'Low', 'Close', 'Volume'")

# === –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ ===
signals_df = pd.read_csv("tradingview_signals_server.csv")
signals_df['Date'] = pd.to_datetime(signals_df['utc_time'], errors='coerce', utc=True)

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏
if signals_df['Date'].isna().any():
    raise ValueError("‚ùå –û—à–∏–±–∫–∞: –í —Å—Ç–æ–ª–±—Ü–µ 'utc_time' –µ—Å—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è.")


# === –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ ===
def save_candlestick_plot(df, signals_df, symbol, interval):
    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å–∏–º–≤–æ–ª—É
    df_symbol = df[df['Symbol'] == symbol].copy()
    df_symbol = df_symbol.drop(columns=['Symbol'])

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ –ø–æ —Å–∏–º–≤–æ–ª—É –∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª—É
    signals_filtered = signals_df[
        (signals_df['symbol'] == symbol) &
        (signals_df['timeframe'] == interval) &
        (signals_df['Date'].between(df_symbol.index.min(), df_symbol.index.max()))
        ]

    if signals_filtered.empty:
        print(f"‚ö†Ô∏è –ù–µ—Ç —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è {symbol} ({interval})")
    else:
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(signals_filtered)} —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è {symbol} ({interval})")

    # –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
    base_dir = "plots"
    os.makedirs(base_dir, exist_ok=True)
    plot_path = os.path.join(base_dir, f"{symbol}_{interval}.png")

    # === –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ ===
    fig, (ax, ax_volume) = plt.subplots(2, figsize=(14, 8), gridspec_kw={'height_ratios': [3, 1]}, sharex=True)

    # –†–∏—Å—É–µ–º —Å–≤–µ—á–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫ + –æ–±—ä–µ–º—ã
    mpf.plot(df_symbol, type='candle', ax=ax, volume=ax_volume, ylabel="Price", ylabel_lower="Volume")

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª—ã –Ω–∞ –≥—Ä–∞—Ñ–∏–∫
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª—ã –Ω–∞ –≥—Ä–∞—Ñ–∏–∫
    for _, row in signals_filtered.iterrows():
        color = 'green' if row['signal'] == 'STRONG_BUY' else 'red'
        marker = '^' if row['signal'] == 'STRONG_BUY' else 'v'

        # –í—ã–≤–æ–¥–∏–º –∫–∞–∂–¥—É—é —Ç–æ—á–∫—É, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –æ–Ω–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤—ã—á–∏—Å–ª—è—é—Ç—Å—è
        print(f"üìç –°–∏–≥–Ω–∞–ª: {row['signal']}, –î–∞—Ç–∞: {row['Date']}, –¶–µ–Ω–∞: {row['entry_price']}")

        ax.scatter(row['Date'], row['entry_price'], color=color, marker=marker, s=120, edgecolors='black', zorder=3)
        ax.text(row['Date'], row['entry_price'], row['signal'].replace("STRONG_", ""),
                fontsize=10, verticalalignment='bottom' if row['signal'] == 'STRONG_BUY' else 'top',
                color=color, bbox=dict(facecolor='white', edgecolor=color, boxstyle='round,pad=0.3'))

    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–∏ X
    plt.xticks(rotation=30)
    plt.grid(True, linestyle='--', alpha=0.5)

    plt.savefig(plot_path, dpi=300)
    plt.close()
    print(f"‚úÖ –ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {plot_path}")


# === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ ===
symbols = df['Symbol'].unique()
interval = "1h"

for symbol in df['Symbol'].unique():
    print(f"\nüîé –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–º–≤–æ–ª: {symbol}")

    # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —Å–∏–º–≤–æ–ª—É
    df_symbol = df[df.index.notna()].copy()  # –£–±–∏—Ä–∞–µ–º NaN, –µ—Å–ª–∏ –µ—Å—Ç—å
    signals_filtered = signals_df[(signals_df['symbol'] == symbol) & (signals_df['timeframe'] == interval)]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç
    print(f"üìÖ –î–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç —Å–≤–µ—á–µ–π: {df_symbol.index.min()} - {df_symbol.index.max()}")
    print(f"üìÖ –î–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç —Å–∏–≥–Ω–∞–ª–æ–≤: {signals_filtered['Date'].min()} - {signals_filtered['Date'].max()}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤
    if signals_filtered.empty:
        print("‚ö†Ô∏è –ù–µ—Ç —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ —Å–∏–º–≤–æ–ª–∞.")
    else:
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(signals_filtered)} —Å–∏–≥–Ω–∞–ª–æ–≤.")
        print(signals_filtered[['Date', 'signal', 'entry_price']].head())  # –í—ã–≤–æ–¥–∏–º –ø–µ—Ä–≤—ã–µ 5 —Å–∏–≥–Ω–∞–ª–æ–≤

    save_candlestick_plot(df, signals_df, symbol, interval)





