import asyncio
import configparser
import logging
import binance
import db
from datetime import datetime, timezone, timedelta, time
from concurrent.futures import ThreadPoolExecutor
import utils
import traceback
import get_data
import tg_old
import pprint
from sqlalchemy import select, update
from datetime import datetime
from collections import defaultdict
import asyncio
import tg

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
conf: db.ConfigInfo
client: binance.Futures
session = None
executor = ThreadPoolExecutor(max_workers=30)
all_symbols: dict[str, binance.SymbolFutures] = {}
all_prices: dict[str, binance.SymbolFutures] = {}


IMPORTANT_SYMBOLS = ['BTCUSDT', 'ETHUSDT']
VALID_SIGNALS = ['STRONG_BUY', 'STRONG_SELL']

# timeframes = ["15m", "5m", "30m"]
timeframes = ["5m"]
btc_signal = None
# —Å–ø–∏—Å–æ–∫ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π
positions = {}
websockets_list: list[binance.futures.WebsocketAsync] = []
debug = None
symbol_conf_cache: dict[str, db.SymbolsSettings] = {}
in_progress = {}
userdata_ws = None
symbol_locks = defaultdict(asyncio.Lock)




async def main():
    global session, conf, client, all_symbols, all_prices, debug, symbol_conf_cache, positions

    config.read('config.ini')

    # –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    session = await db.connect(config['DB']['host'], int(config['DB']['port']),
        config['DB']['user'], config['DB']['password'], config['DB']['db'])

    # –∫–æ–Ω—Ñ–∏–≥ –∏ –∫–ª–∏–µ–Ω—Ç
    conf = await db.load_config()
    client = binance.Futures(
        conf.api_key, conf.api_secret,
        asynced=True, testnet=config.getboolean('BOT', 'testnet')
    )
    debug = config.getboolean('BOT', 'debug')

    # —Å–∏–º–≤–æ–ª—ã –∏ –∫–æ–Ω—Ñ–∏–≥–∏
    symbol_confs = await db.get_all_symbols_conf()
    symbol_conf_cache = {s.symbol: s for s in symbol_confs}

    # –∑–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π
    await get_data.sync_positions_with_exchange(client, positions)
    open_symbols = [symbol for symbol, status in positions.items() if status]
    print(f"–û—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {len(open_symbols)}")

    # –¥–∞–Ω–Ω—ã–µ Binance
    all_symbols = await get_data.load_binance_symbols(client)
    all_prices = await get_data.get_all_prices(client)

    # –∑–∞–ø—É—Å–∫ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á
    symbol_update_lock = asyncio.Lock()
    await asyncio.gather(
        *(timed_collector(tf, symbol_update_lock) for tf in timeframes),
        db.periodic_symbol_update(client, executor, symbol_update_lock, hour=17, minute=35),
        # tg.run(),
        tg.run(session, client, connect_ws, disconnect_ws, subscribe_ws, unsubscribe_ws),
        connect_ws()
    )





async def timed_collector(timeframe: str, lock: asyncio.Lock):
    global symbol_conf_cache, all_symbols, all_prices, conf

    while True:
        await utils.wait_for_next_candle(timeframe)
        async with lock:
            try:
                # ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à 1 —Ä–∞–∑ –Ω–∞ —Ç–∞–π–º—Ñ—Ä–µ–π–º
                symbol_confs = await db.get_all_symbols_conf()
                symbol_conf_cache = {s.symbol: s for s in symbol_confs}

                all_symbols = await get_data.load_binance_symbols(client)
                all_prices = await get_data.get_all_prices(client)

                if timeframe == timeframes[0]:
                    conf = await db.load_config()
                    await process_main_timeframe_signals()
                    await asyncio.sleep(1)
                else:
                    await asyncio.sleep(5)
                    await collect_signals(timeframe)

            except Exception as e:
                logging.error(f"[{timeframe}] –û—à–∏–±–∫–∞ –≤ —Å–±–æ—Ä—â–∏–∫–µ —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")



async def collect_signals(timeframe=timeframes[0]):
    available_symbols = list(symbol_conf_cache.keys())
    symbols_ordered = IMPORTANT_SYMBOLS + [s for s in available_symbols if s not in IMPORTANT_SYMBOLS]

    loop = asyncio.get_running_loop()
    tasks = [process_symbol(symbol, timeframe, loop) for symbol in symbols_ordered]
    results = await asyncio.gather(*tasks)

    signals = [r for r in results if r is not None]

    if signals:
        await db.save_signals_batch_to_db(signals)


async def process_symbol(symbol, interval, loop):
    data = await loop.run_in_executor(executor, get_data.get_tradingview_data, symbol, interval)
    if not data:
        return None

    entry_price = all_prices.get(symbol)
    if entry_price is None:
        logging.warning(f"–¶–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è {symbol}")
        return None

    return (symbol, interval, data['RECOMMENDATION'], entry_price)


async def process_main_timeframe_signals():
    global btc_signal
    logging.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ {timeframes[0]} –∏ –æ—Ç–∫—Ä—ã—Ç–∏–µ —Å–¥–µ–ª–æ–∫...")

    interval = timeframes[0]

    loop = asyncio.get_running_loop()
    btc_data = await loop.run_in_executor(executor, get_data.get_tradingview_data, 'BTCUSDT', interval)
    if not btc_data:
        logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª BTCUSDT ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É.")
        return
    btc_signal = btc_data['RECOMMENDATION']
    logging.info(f"–°–∏–≥–Ω–∞–ª BTCUSDT {timeframes[0]}: {btc_signal}")

    available_symbols = list(symbol_conf_cache.keys())
    symbols_ordered = IMPORTANT_SYMBOLS + [s for s in available_symbols if s not in IMPORTANT_SYMBOLS]


    tasks = [process_trade_signal(symbol, interval) for symbol in symbols_ordered]
    results = await asyncio.gather(*tasks)

    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∏–≥–Ω–∞–ª–æ–≤: {results}")

    signals_to_save = [r for r in results if r is not None]
    print('SIGNAL TO SAVE', datetime.now(timezone.utc), signals_to_save)

    if signals_to_save:
        logging.info(f"–°–æ—Ö—Ä–∞–Ω—è–µ–º {len(signals_to_save)} —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ –ë–î")
        # await db.save_signals_batch_to_db(signals_to_save)
    else:
        logging.warning("–ù–µ—Ç —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è ‚Äî —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç.")


async def process_trade_signal(symbol, interval):
    global debug, conf
    signal_to_return = None
    try:
        loop = asyncio.get_running_loop()
        data = await loop.run_in_executor(executor, get_data.get_tradingview_data, symbol, interval)
        if not data:
            print('NO DATA')
            return None

        entry_price = all_prices.get(symbol)
        if entry_price is None:
            logging.warning(f"–¶–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è {symbol}, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å NaN")
            entry_price = float('nan')

        recommendation = data['RECOMMENDATION']
        signal_to_return = (symbol, interval, recommendation, entry_price)
        # print(f'SIGNAL TO RETURN {datetime.now(timezone.utc)} {signal_to_return}')

        if not conf.trade_mode:
            return signal_to_return

        if not conf.api_key or not conf.api_secret:
            await db.config_update(trade_mode='0')
            return signal_to_return

        symbol_conf = symbol_conf_cache.get(symbol)
        if not symbol_conf or not symbol_conf.status:
            return signal_to_return

        if debug:
            open_long = recommendation in ['STRONG_BUY', 'BUY', 'NEUTRAL']
            open_short = recommendation in ['STRONG_SELL', 'SELL']
        else:
            open_long = recommendation == 'STRONG_BUY' and btc_signal in ['STRONG_BUY', 'BUY', 'NEUTRAL']
            open_short = recommendation == 'STRONG_SELL' and btc_signal in ['STRONG_SELL', 'SELL', 'NEUTRAL']

        signal = None
        if open_long:
            signal = "BUY"
        elif open_short:
            signal = "SELL"

        # print('POSITIONS PROCESS TRADE SIGNAL RUN', datetime.now(timezone.utc), positions)
        if signal and not positions.get(symbol, False):
            logging.info(f"–û—Ç–∫—Ä—ã—Ç–∏–µ {signal} –ø–æ {symbol} @ {entry_price} | BTC = {btc_signal}")
            await new_trade(symbol, interval, signal)

        return signal_to_return

    except Exception as e:
        logging.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–∏–≥–Ω–∞–ª–∞ {symbol}: {e}")
        return signal_to_return




async def new_trade(symbol, interval, signal):
    global positions
    loop = asyncio.get_running_loop()



    # --- üö´ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø—Ä–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ ---
    if positions.get(symbol):
        logging.warning(f"{symbol}: –ø–æ–∑–∏—Ü–∏—è —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞ (–ø–æ —Ñ–ª–∞–≥—É positions), –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—Ö–æ–¥ –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return

    try:
        # --- üîé –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ Binance ---
        binance_positions = await client.get_position_risk(symbol=symbol)
        position_info = next((p for p in binance_positions if p["symbol"] == symbol), None)

        if position_info and abs(float(position_info["positionAmt"])) > 0:
            logging.warning(f"{symbol}: –ø–æ–∑–∏—Ü–∏—è —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞ –Ω–∞ Binance, –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—Ö–æ–¥ –∑–∞–ø—Ä–µ—â—ë–Ω.")
            positions[symbol] = True  # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Ñ–ª–∞–≥
            return

        # --- üîé –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ –ë–î ---
        # existing_trade = await db.get_open_trade(symbol)
        # if existing_trade and existing_trade.position_open:
        #     logging.warning(f"{symbol}: –æ—Ç–∫—Ä—ã—Ç–∞—è —Å–¥–µ–ª–∫–∞ —É–∂–µ –µ—Å—Ç—å –≤ –ë–î (id={existing_trade.id}), –≤—Ö–æ–¥ –∑–∞–ø—Ä–µ—â—ë–Ω.")
        #     positions[symbol] = True  # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Ñ–ª–∞–≥
        #     return

    except Exception as e:
        logging.error(f"{symbol}: –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ø–æ–∑–∏—Ü–∏–∏: {e}")
        return

    try:
        try:
            klines = await client.klines(symbol, interval=interval, limit=150)
            # print(f"{symbol} klines{klines}")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–≤–µ—á–µ–π: {e}")
            return

        # –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏–º–≤–æ–ª–µ
        if not (symbol_info := all_symbols.get(symbol)):
            print('NO SYMBOL INFO')
            return

        #–ø–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–∏ÃÜ–∫–∏ –¥–ª—è —Å–∏–º–≤–æ–ª–∞
        try:
            symbol_conf = symbol_conf_cache.get(symbol)
            # print(f"{symbol}: {symbol_conf}")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–∏–º–≤–æ–ª–∞ {symbol}: {e}")
            return

        atr_length = symbol_conf.atr_length
        # print(f"{symbol} atr: {atr_length}")
        try:
            df = await loop.run_in_executor(executor, utils.calculate_atr, klines, atr_length)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ atr: {e}")
            return

        last_row = df.iloc[-1]
        atr = float(last_row["ATR"])
        # print(f'{symbol}, atr:{atr}')

        #–ø–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ü–µ–Ω—É
        last_price = all_prices.get(symbol)
        # print(f"LAST PRICE {symbol}: {last_price}")

        # —Ä–∞—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        quantity = utils.round_down(symbol_conf.order_size / last_price, symbol_info.step_size)
        # print(f"{symbol} QUANTITY: {quantity}")

        # –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ–±—ã –æ–±—ä–µ–º –±—ã–ª –±–æ–ª—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ
        min_notional = symbol_info.notional * 1.1
        if quantity * last_price < min_notional:
            # –µ—Å–ª–∏ –æ–±—ä–µ–º –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ, —Ç–æ –±–µ—Ä–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º
            quantity = utils.round_up(min_notional / last_price, symbol_info.step_size)
        # —Å–æ–∑–¥–∞–µ–º –æ—Ä–¥–µ—Ä –Ω–∞ –≤—Ö–æ–¥ –≤ –ø–æ–∑–∏—Ü–∏—é
        # print(f"–û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –ø–æ {symbol}")
        entry_order = await client.new_order(symbol=symbol, side='BUY' if signal == "BUY" else 'SELL', type='MARKET',
                                             quantity=quantity, newOrderRespType='RESULT')



        # order_info = await db.get_active_entry_order_info(symbol, client)
        #
        # if order_info:
        #     print("‚ÑπÔ∏è –ò–Ω—Ñ–æ –ø–æ –≤—Ö–æ–¥–Ω–æ–º—É –æ—Ä–¥–µ—Ä—É:", order_info)



    except:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ {'–õ–û–ù–ì–û–í–û–ô' if signal == "BUY" else '–®–û–†–¢–û–í–û–ô'} –ø–æ–∑–∏—Ü–∏–∏ –ø–æ {symbol}\n{traceback.format_exc()}")
        positions.pop(symbol, None)
        return

    try:
        # –ø–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –≤—Ö–æ–¥–∞
        entry_price = float(entry_order['avgPrice'])
        # –ø–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑ –æ—Ä–¥–µ—Ä–∞
        quantity = float(entry_order['executedQty'])
        # —Ä–∞—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–µ–Ω—ã —Å—Ç–æ–ø–∞ –∏ —Ç–µ–π–∫–∞
        if signal == "BUY":
            take_price1 = entry_price + atr * symbol_conf.take1
            take_price2 = entry_price + atr * symbol_conf.take2
            stop_price = entry_price - atr * symbol_conf.stop
        else:
            take_price1 = entry_price - atr * symbol_conf.take1
            take_price2 = entry_price - atr * symbol_conf.take2
            stop_price = entry_price + atr * symbol_conf.stop

        # –æ–∫—Ä—É–≥–ª—è–µ–º
        take_price1 = round(take_price1, symbol_info.tick_size)
        take_price2 = round(take_price2, symbol_info.tick_size)
        stop_price = round(stop_price, symbol_info.tick_size)
        # —Å–æ–∑–¥–∞–µ–º –æ—Ä–¥–µ—Ä—ã –Ω–∞ —Å—Ç–æ–ø –∏ —Ç–µ–π–∫
        stop_order = await client.new_order(symbol=symbol, side='SELL' if signal == "BUY" else 'BUY', type='STOP_MARKET',
                                            quantity=quantity, stopPrice=stop_price, timeInForce='GTE_GTC', reduceOnly=True)
        take_order = await client.new_order(symbol=symbol, side='SELL' if signal == "BUY" else 'BUY', type='LIMIT',
                                            quantity=quantity, price=take_price2, timeInForce='GTC', reduceOnly=True)
        print(f"–û—Ç–∫—Ä—ã–ª {signal} –ø–æ–∑–∏—Ü–∏—é –ø–æ {symbol} –ø–æ —Ü–µ–Ω–µ {entry_price} —Å —Ç–µ–π–∫–æ–º {take_price2} –∏ —Å—Ç–æ–ø–æ–º {stop_price}")
        # —Å–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö

        positions[symbol] = True


        async with session() as s:
            # –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Å–¥–µ–ª–∫—É –≤ –ë–î
            trade = db.Trades(symbol=symbol, order_size=float(entry_order['cumQuote']), side = 1 if signal == "BUY" else 0,
                              status='NEW', open_time=entry_order['updateTime'], interval=interval, leverage=symbol_conf.leverage,
                              atr_length=atr_length, atr=atr, entry_price=entry_price, quantity=quantity, take1_price=take_price1,
                              take2_price=take_price2, stop_price=stop_price, take1_triggered=False, position_open=True)



            s.add(trade)
            # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ë–î
            await s.commit()
            # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—Ä–¥–µ—Ä–∞ –≤ –ë–î
            for order in (entry_order, stop_order, take_order):
                s.add(db.Orders(order_id=order['orderId'], trade_id=trade.id, symbol=symbol, time=order['updateTime'],
                                side=order['side'] == 'BUY', type=order['type'], status=order['status'],
                                reduce=order['reduceOnly'], price=float(order['avgPrice']),
                                quantity=float(order['executedQty'])))
            # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ë–î
            await s.commit()
            try:
                # —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –≤ –∫–∞–Ω–∞–ª
                text = (f"–û—Ç–∫—Ä—ã–ª –≤ <b>{'–õ–û–ù–ì' if signal == 'BUY' else '–®–û–†–¢'}</b> {quantity} <b>{symbol}</b>\n"
                        f"–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: <b>{entry_price}</b>\n"
                        f"–¢–µ–π–∫ 1: <b>{take_price1}</b>\n"
                        f"–¢–µ–π–∫ 2: <b>{take_price2}</b>\n"
                        f"–°—Ç–æ–ø: <b>{stop_price}</b>\n"
                        )
                # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª
                msg = await tg.bot.send_message(config['TG']['channel'], text, parse_mode='HTML')
                # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ë–î
                trade.msg_id = msg.message_id
                await s.commit()
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è {symbol}, {e}")
    except:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ —Å—Ç–æ–ø–∞ –∏ —Ç–µ–π–∫–∞ –ø–æ {symbol}\n{traceback.format_exc()}")
        # –∑–∞–∫—Ä—ã–≤–∞—é —Å–¥–µ–ª–∫—É –ø–æ —Ä—ã–Ω–∫—É
        await client.new_order(symbol=symbol, side='SELL' if signal == "BUY" else 'BUY', type='MARKET', quantity=quantity,
                               reduceOnly=True)

        try:
            positions[symbol] = False
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ñ–ª–∞–≥–∞ –Ω–∞ False –ø—Ä–∏ positions[symbol]: {e}")





# –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –≤–µ–±—Å–æ–∫–µ—Ç–∞–º
async def connect_ws():
    global websockets_list, userdata_ws
    streams = []

    print("üîå –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ WebSocket'–∞–º...")
    conf = await db.load_config()
    if not conf.trade_mode or not conf.api_key or not conf.api_secret:
        await db.config_update(trade_mode='0')
        return


    available_symbols = list(symbol_conf_cache.keys())
    symbols_ordered = IMPORTANT_SYMBOLS + [s for s in available_symbols if s not in IMPORTANT_SYMBOLS]

    for symbol in symbols_ordered:
        conf = symbol_conf_cache.get(symbol)
        # print(f"WS {symbol}")
        if conf and conf.status:
            # print('STREAMS APPENDED')
            streams.append(f"{symbol.lower()}@kline_{conf.interval}")

    chunk_size = 100
    streams_list = [streams[i:i + chunk_size] for i in range(0, len(streams), chunk_size)]

    for stream_list in streams_list:
        # –∑–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±—Å–æ–∫–µ—Ç—ã
        websockets_list.append(await client.websocket(stream_list, on_message=ws_msg, on_error=ws_error))
    # –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –≤–µ–±—Å–æ–∫–µ—Ç—É userdata
    userdata_ws = await client.websocket_userdata(on_message=ws_user_msg, on_error=ws_error)





# –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –≤–µ–±—Å–æ–∫–µ—Ç–æ–≤
async def disconnect_ws():
    global websockets_list, userdata_ws, indicators

    print("üîå –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç WebSocket'–æ–≤...")
    for ws in websockets_list:
        try:
            await ws.close()
        except:
            pass

    indicators = {}

    try:
        await userdata_ws.close()
    except:
        pass

# –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å—Ç—Ä–∏–º —Å–≤–µ—á–µ–π –ø–æ —Å–∏–º–≤–æ–ª—É
async def subscribe_ws(symbol, interval):
    global websockets_list
    stream = f"{symbol.lower()}@kline_{interval}"
    for ws in websockets_list:
        if len(ws.stream) < ws.streams_limit:
            await ws.subscribe([stream])
            return

    ws = await client.websocket([stream], on_message=ws_msg, on_error=ws_error)
    websockets_list.append(ws)

# –æ—Ç–ø–∏—Å–∫–∞ –æ—Ç —Å—Ç—Ä–∏–º–∞ –ø–æ —Å–∏–º–≤–æ–ª—É
async def unsubscribe_ws(symbol):
    global websockets_list
    for ws in websockets_list:
        for stream in ws.stream:
            if stream.split('@')[0] == symbol.lower():
                await ws.unsubscribe(stream)

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤–µ–±—Å–æ–∫–µ—Ç–∞
async def ws_error(ws, error):
    print(f"‚ùå WS ERROR: {error}")
    print(traceback.format_exc())




# –†–µ–∞–∫—Ü–∏—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –∏–∑ –ø–æ—Ç–æ–∫–∞ —Å–≤–µ—á–µ–π
# async def ws_msg(ws, msg):
#     if 'data' not in msg:
#         return
#
#     kline = msg['data']['k']
#     symbol = kline['s']
#     current_price = float(kline['c'])
#
#     try:
#         trade = await db.get_open_trade(symbol)
#         if not trade:
#             return
#
#         direction = "BUY" if trade.side else "SELL"
#
#         take1_hit = current_price >= trade.take1_price if direction == "BUY" else current_price <= trade.take1_price
#         take2_hit = current_price >= trade.take2_price if direction == "BUY" else current_price <= trade.take2_price
#         stop_hit = current_price <= trade.stop_price if direction == "BUY" else current_price >= trade.stop_price
#         close_breakeven_hit = False
#
#         if trade.breakeven_stop_price:
#             close_breakeven_hit = (
#                 current_price <= trade.breakeven_stop_price
#                 if direction == "BUY"
#                 else current_price >= trade.breakeven_stop_price
#             )
#
#         async with session() as s:
#             # –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –±–µ–∑—É–±—ã—Ç–∫—É ‚Äî –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–µ–µ
#             if close_breakeven_hit:
#                 reason = "üéØ –ó–∞–∫—Ä—ã–ª–∏—Å—å –≤ –ë–£"
#                 close_breakeven = trade.breakeven_stop_price
#
#                 logging.info(f"{symbol}: {reason} –ø–æ —Ü–µ–Ω–µ {close_breakeven}")
#
#                 stmt = (
#                     update(db.Trades)
#                     .where(db.Trades.id == trade.id)
#                     .values(
#                         position_open=False,
#                         close_time=int(datetime.now(timezone.utc).timestamp() * 1000),
#                         status='STOP2'
#                     )
#                 )
#                 await s.execute(stmt)
#                 await s.commit()
#                 return
#
#             # –ß–∞—Å—Ç–∏—á–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –∏ –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç–æ–ø–∞
#             if not trade.take1_triggered and take1_hit:
#                 logging.info(f"{symbol}: –¥–æ—Å—Ç–∏–≥–Ω—É—Ç Take1 {trade.take1_price}. –ß–∞—Å—Ç–∏—á–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –∏ –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç–æ–ø–∞.")
#
#                 stmt = (
#                     update(db.Trades)
#                     .where(db.Trades.id == trade.id)
#                     .values(take1_triggered=True)
#                 )
#                 await s.execute(stmt)
#                 await s.commit()
#
#                 asyncio.create_task(partial_close_and_move_stop(trade))
#                 return
#
#             # –ü–æ–ª–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ —Ç–µ–π–∫—É2 –∏–ª–∏ —Å—Ç–æ–ø—É1
#             if take2_hit or stop_hit:
#                 reason = "üéØ –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ TAKE2" if take2_hit else "‚õîÔ∏è –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –°–¢–û–ü–£"
#                 close_price = trade.take2_price if take2_hit else trade.stop_price
#
#                 logging.info(f"{symbol}: {reason} –ø–æ —Ü–µ–Ω–µ {close_price}")
#
#                 stmt = (
#                     update(db.Trades)
#                     .where(db.Trades.id == trade.id)
#                     .values(
#                         position_open=False,
#                         close_time=int(datetime.now(timezone.utc).timestamp() * 1000),
#                         status='TAKE2' if take2_hit else 'STOP1'
#                     )
#                 )
#                 await s.execute(stmt)
#                 await s.commit()
#                 return
#
#     except Exception as e:
#         logging.error(f"{symbol}: –æ—à–∏–±–∫–∞ –≤ ws_msg: {e}")



async def ws_msg(ws, msg):
    if 'data' not in msg:
        return

    kline = msg['data']['k']
    symbol = kline['s']
    current_price = float(kline['c'])

    try:
        trade = await db.get_open_trade(symbol)
        if not trade:
            return

        direction = "BUY" if trade.side else "SELL"

        take1_hit = current_price >= trade.take1_price if direction == "BUY" else current_price <= trade.take1_price
        take2_hit = current_price >= trade.take2_price if direction == "BUY" else current_price <= trade.take2_price
        stop_hit = current_price <= trade.stop_price if direction == "BUY" else current_price >= trade.stop_price

        close_breakeven_hit = False
        if trade.breakeven_stop_price:
            close_breakeven_hit = (
                current_price <= trade.breakeven_stop_price
                if direction == "BUY"
                else current_price >= trade.breakeven_stop_price
            )

        # --- –ß–∞—Å—Ç–∏—á–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ (Take1) ---
        if not trade.take1_triggered and take1_hit:
            logging.info(f"{symbol}: –¥–æ—Å—Ç–∏–≥–Ω—É—Ç Take1 {trade.take1_price}. –ß–∞—Å—Ç–∏—á–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –∏ –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç–æ–ø–∞.")

            async with session() as s:
                await s.execute(
                    update(db.Trades)
                    .where(db.Trades.id == trade.id)
                    .values(take1_triggered=True)
                )
                await s.commit()

            asyncio.create_task(partial_close_and_move_stop(trade))
            return

        # --- –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ breakeven, stop –∏–ª–∏ take2 ---
        if close_breakeven_hit or stop_hit or take2_hit:
            close_type = (
                "–ë–£" if close_breakeven_hit else
                "–°–¢–û–ü" if stop_hit else
                "–¢–ï–ô–ö2"
            )
            logging.info(f"{symbol}: —Å—Ä–∞–±–æ—Ç–∞–ª {close_type}. –û—Ç–ø—Ä–∞–≤–∫–∞ STOP_MARKET –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏.")

            stop_price = (
                trade.breakeven_stop_price if close_breakeven_hit
                else trade.stop_price if stop_hit
                else trade.take2_price
            )

            qty = utils.round_down(trade.quantity, all_symbols[symbol].step_size)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞: —É–∂–µ –µ—Å—Ç—å —Ç–∞–∫–æ–π —Å—Ç–æ–ø-–æ—Ä–¥–µ—Ä?
            if not await db.check_stop_order_exists(trade.id, stop_price):
                await client.new_order(
                    symbol=symbol,
                    side='SELL' if trade.side else 'BUY',
                    type='STOP_MARKET' if close_breakeven_hit or stop_hit else 'LIMIT',
                    stopPrice=stop_price if close_breakeven_hit or stop_hit else None,
                    price=stop_price if take2_hit else None,
                    quantity=qty,
                    reduceOnly=True,
                    timeInForce='GTC' if take2_hit else None
                )
            return

    except Exception as e:
        logging.error(f"{symbol}: –æ—à–∏–±–∫–∞ –≤ ws_msg: {e}")





# async def ws_user_msg(ws, msg):
#     global positions
#
#     if msg.get('e') != 'ORDER_TRADE_UPDATE':
#         return
#
#     o = msg['o']
#     symbol = o['s']
#
#     # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ reduceOnly –æ—Ä–¥–µ—Ä–∞ (–∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏)
#     if not o.get('R') or o['X'] not in ('FILLED', 'PARTIALLY_FILLED', 'CANCELLED', 'EXPIRED'):
#         return
#
#     # –ü–æ–ª—É—á–∞–µ–º –æ—Ä–¥–µ—Ä –∏ —Å–¥–µ–ª–∫—É
#     order, trade = await db.get_order_trade(o['i'])
#
#     # –ï—Å–ª–∏ –æ—Ä–¥–µ—Ä–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ, –æ–Ω —Ç–æ–ª—å–∫–æ —á—Ç–æ –±—ã–ª —Å–æ–∑–¥–∞–Ω –Ω–∞ —á–∞—Å—Ç–∏—á–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ
#     if not order:
#         trade = await db.get_open_trade(symbol)
#         if trade:
#             async with session() as s:
#                 # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç –ø–æ order_id
#                 existing_order = (await s.execute(
#                     select(db.Orders).where(db.Orders.order_id == o['i'])
#                 )).scalar_one_or_none()
#
#                 if not existing_order:
#                     order = db.Orders(
#                         order_id=o['i'],
#                         trade_id=trade.id,
#                         symbol=symbol,
#                         time=o['T'],
#                         side=o['S'] == 'BUY',
#                         type=o['o'],
#                         status='NEW',
#                         reduce=o['R'],
#                         price=float(o['ap']),
#                         quantity=float(o['z'])
#                     )
#                     s.add(order)
#                     await s.commit()
#                 else:
#                     order = existing_order
#
#     if order and trade:
#         order.status = o['X']
#         order.time = o['T']
#
#         if qty := float(o['z']):
#             order.quantity = qty
#         if price := float(o['ap']):
#             order.price = price
#
#         # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏–±—ã–ª—å
#         if o['X'] in ('FILLED', 'PARTIALLY_FILLED'):
#             if trade.result is None:
#                 trade.result = 0.0
#             trade.result += float(o['rp'])
#
#         # –ï—Å–ª–∏ —ç—Ç–æ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ä–¥–µ—Ä –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ–π –ø–æ–∑–∏—Ü–∏–∏ (–Ω–µ reduceOnly)
#         if o['X'] == 'FILLED' and not o['R']:
#             trade.close_time = int(datetime.now(timezone.utc).timestamp() * 1000)
#
#
#
#
#             trade.status = 'CLOSED'
#             trade.position_open = False
#
#         await db.update_order_trade(order, trade)
#
#
#         # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–æ–ª–Ω–æ–º –∑–∞–∫—Ä—ã—Ç–∏–∏
#         if o['X'] == 'FILLED':
#             order_type = 'üìâ –ø–æ —Ä—ã–Ω–∫—É'
#             if o['ot'] == 'STOP_MARKET':
#                 if trade.take1_triggered and trade.breakeven_stop_price:
#                     order_type = 'üîÑ —Å—Ç–æ–ø –≤ –ë–£ (–ø–æ—Å–ª–µ Take1)'
#                 else:
#                     order_type = '‚õîÔ∏è –ø–æ –°–¢–û–ü–£'
#             elif o['ot'] == 'LIMIT':
#                 order_type = 'üéØ –ø–æ Take2 (–ø–æ—Å–ª–µ Take1)' if trade.take1_triggered else 'üéØ –ø–æ Take2'
#
#             text = (
#                 f"<b>{symbol}</b> —Å–¥–µ–ª–∫–∞ –≤ <b>{'–õ–û–ù–ì' if trade.side else '–®–û–†–¢'}</b> "
#                 f"–∑–∞–∫—Ä—ã—Ç–∞ {order_type}\n"
#                 f"–¶–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è: <b>{order.price}</b>\n"
#                 f"{'–ü—Ä–∏–±—ã–ª—å' if trade.result > 0 else '–£–±—ã—Ç–æ–∫'}: <b>{round(trade.result, 4)} USDT</b>"
#             )
#
#             try:
#                 if trade.msg_id:
#                     await tg.bot.send_message(
#                         config['TG']['channel'],
#                         text,
#                         reply_to_message_id=trade.msg_id,
#                         parse_mode='HTML'
#                     )
#             except Exception as e:
#                 logging.error(f"{symbol}: –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
#
#             positions.pop(symbol, None)
#             print(f"–°–¥–µ–ª–∫–∞ –ø–æ {symbol} –∑–∞–∫—Ä—ã—Ç–∞.")
#
#
# async def ws_user_msg(ws, msg):
#     global positions
#
#     if msg.get('e') != 'ORDER_TRADE_UPDATE':
#         return
#
#     o = msg['o']
#     symbol = o['s']
#
#     # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ reduceOnly –æ—Ä–¥–µ—Ä–∞ (–∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏)
#     if not o.get('R') or o['X'] not in ('FILLED', 'PARTIALLY_FILLED', 'CANCELLED', 'EXPIRED'):
#         return
#
#     # –ü–æ–ª—É—á–∞–µ–º –æ—Ä–¥–µ—Ä –∏ —Å–¥–µ–ª–∫—É
#     order, trade = await db.get_order_trade(o['i'])
#
#     # –ï—Å–ª–∏ –æ—Ä–¥–µ—Ä–∞ –Ω–µ—Ç ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ, –æ–Ω —Ç–æ–ª—å–∫–æ —á—Ç–æ –±—ã–ª —Å–æ–∑–¥–∞–Ω –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è
#     if not order:
#         trade = await db.get_open_trade(symbol)
#         if trade:
#             async with session() as s:
#                 order = db.Orders(
#                     order_id=o['i'],
#                     trade_id=trade.id,
#                     symbol=symbol,
#                     time=o['T'],
#                     side=o['S'] == 'BUY',
#                     type=o['o'],
#                     status='NEW',
#                     reduce=o['R'],
#                     price=float(o['ap']),
#                     quantity=float(o['z']),
#                 )
#                 s.add(order)
#                 await s.commit()
#
#     if order and trade:
#         order.status = o['X']
#         order.time = o['T']
#
#         if qty := float(o['z']):
#             order.quantity = qty
#         if price := float(o['ap']):
#             order.price = price
#
#         # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏–±—ã–ª—å
#         if o['X'] in ('FILLED', 'PARTIALLY_FILLED'):
#             if trade.result is None:
#                 trade.result = 0.0
#             trade.result += float(o['rp'])
#
#         # --- –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫—Ä—ã—Ç–∏—è —Å–¥–µ–ª–∫–∏ ---
#         if o['X'] == 'FILLED' and not o['R']:
#             trade.close_time = int(datetime.now(timezone.utc).timestamp() * 1000)
#             trade.position_open = False
#
#             ot = o.get('ot')  # —Ç–∏–ø –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞
#
#             if ot == 'STOP_MARKET':
#                 if trade.take1_triggered and trade.breakeven_stop_price:
#                     trade.status = 'CLOSED_BU'
#                 else:
#                     trade.status = 'CLOSED_STOP'
#             elif ot == 'LIMIT':
#                 trade.status = 'CLOSED_TAKE'
#             else:
#                 trade.status = 'CLOSED_MARKET'
#
#         await db.update_order_trade(order, trade)
#
#         # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–æ–ª–Ω–æ–º –∑–∞–∫—Ä—ã—Ç–∏–∏
#         if o['X'] == 'FILLED':
#             # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
#             status_text = {
#                 'CLOSED_BU': 'üîÑ —Å—Ç–æ–ø –≤ –ë–£ (–ø–æ—Å–ª–µ Take1)',
#                 'CLOSED_STOP': '‚õîÔ∏è –ø–æ –°–¢–û–ü–£',
#                 'CLOSED_TAKE': 'üéØ –ø–æ Take2',
#                 'CLOSED_MARKET': 'üìâ –ø–æ —Ä—ã–Ω–∫—É'
#             }.get(trade.status, 'üìâ –∑–∞–∫—Ä—ã—Ç–∞')
#
#             text = (
#                 f"<b>{symbol}</b> —Å–¥–µ–ª–∫–∞ –≤ <b>{'–õ–û–ù–ì' if trade.side else '–®–û–†–¢'}</b> "
#                 f"–∑–∞–∫—Ä—ã—Ç–∞ {status_text}\n"
#                 f"–¶–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è: <b>{order.price}</b>\n"
#                 f"{'–ü—Ä–∏–±—ã–ª—å' if trade.result > 0 else '–£–±—ã—Ç–æ–∫'}: <b>{round(trade.result, 4)} USDT</b>"
#             )
#
#             try:
#                 if trade.msg_id:
#                     await tg.bot.send_message(
#                         config['TG']['channel'],
#                         text,
#                         reply_to_message_id=trade.msg_id,
#                         parse_mode='HTML'
#                     )
#             except Exception as e:
#                 logging.error(f"{symbol}: –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
#
#             positions.pop(symbol, None)
#             print(f"–°–¥–µ–ª–∫–∞ –ø–æ {symbol} –∑–∞–∫—Ä—ã—Ç–∞.")

from datetime import datetime, timezone
import logging

async def ws_user_msg(ws, msg):
    global positions  # —Å–ª–æ–≤–∞—Ä—å —Å –ø–æ–∑–∏—Ü–∏—è–º–∏, –≥–¥–µ positions[symbol] = True/False

    event_type = msg.get('e')
    if event_type == 'ACCOUNT_UPDATE':
        # –í msg['a']['P'] ‚Äî —Å–ø–∏—Å–æ–∫ –ø–æ–∑–∏—Ü–∏–π, –ø—Ä–∏–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏:
        # {"s":"BTCUSDT","pa":"0.001","ep":"30000","cr":"USDT","up":"30"}
        for pos in msg['a']['P']:
            symbol = pos['s']
            position_amt = float(pos['pa'])
            # –û–±–Ω–æ–≤–ª—è–µ–º –±—É–ª–µ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏: True –µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–∑–∏—Ü–∏—è, False –µ—Å–ª–∏ –Ω–µ—Ç
            positions[symbol] = position_amt != 0.0

    elif event_type == 'ORDER_TRADE_UPDATE':
        o = msg['o']
        symbol = o['s']

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ reduceOnly –æ—Ä–¥–µ—Ä–∞ (–∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏)
        if not o.get('R') or o['X'] not in ('FILLED', 'PARTIALLY_FILLED', 'CANCELLED', 'EXPIRED'):
            return

        # –ü–æ–ª—É—á–∞–µ–º –æ—Ä–¥–µ—Ä –∏ —Å–¥–µ–ª–∫—É –∏–∑ –ë–î
        order, trade = await db.get_order_trade(o['i'])

        # –ï—Å–ª–∏ –æ—Ä–¥–µ—Ä–∞ –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
        if not order:
            trade = await db.get_open_trade(symbol)
            if trade:
                async with session() as s:
                    order = db.Orders(
                        order_id=o['i'],
                        trade_id=trade.id,
                        symbol=symbol,
                        time=o['T'],
                        side=o['S'] == 'BUY',
                        type=o['o'],
                        status='NEW',
                        reduce=o['R'],
                        price=float(o['ap']),
                        quantity=float(o['z']),
                    )
                    s.add(order)
                    await s.commit()

        if order and trade:
            order.status = o['X']
            order.time = o['T']

            if qty := float(o['z']):
                order.quantity = qty
            if price := float(o['ap']):
                order.price = price

            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏–±—ã–ª—å
            if o['X'] in ('FILLED', 'PARTIALLY_FILLED'):
                if trade.result is None:
                    trade.result = 0.0
                trade.result += float(o['rp'])

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ª–Ω–æ—Å—Ç—å—é –ª–∏ –ø–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞ –ø–æ –Ω–∞—à–µ–º—É —Å–ª–æ–≤–∞—Ä—é positions
            position_open = positions.get(symbol, False)

            if not position_open:
                # –ü–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞ ‚Äî –æ–±–Ω–æ–≤–ª—è–µ–º —Å–¥–µ–ª–∫—É
                trade.close_time = int(datetime.now(timezone.utc).timestamp() * 1000)
                trade.position_open = False

                ot = o.get('ot')  # –¢–∏–ø –æ—Ä–¥–µ—Ä–∞

                if ot == 'STOP_MARKET':
                    if trade.take1_triggered and trade.breakeven_stop_price:
                        trade.status = 'CLOSED_BREAKEVEN'
                    else:
                        trade.status = 'CLOSED_STOP'
                elif ot == 'LIMIT':
                    trade.status = 'CLOSED_TAKE'
                else:
                    trade.status = 'CLOSED_MARKET'

            await db.update_order_trade(order, trade)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–æ–ª–Ω–æ–º –∑–∞–∫—Ä—ã—Ç–∏–∏
            if not position_open:
                status_text = {
                    'CLOSED_BU': 'üîÑ —Å—Ç–æ–ø –≤ –ë–£ (–ø–æ—Å–ª–µ Take1)',
                    'CLOSED_STOP': '‚õîÔ∏è –ø–æ –°–¢–û–ü–£',
                    'CLOSED_TAKE': 'üéØ –ø–æ Take2',
                    'CLOSED_MARKET': 'üìâ –ø–æ —Ä—ã–Ω–∫—É'
                }.get(trade.status, 'üìâ –∑–∞–∫—Ä—ã—Ç–∞')

                text = (
                    f"<b>{symbol}</b> —Å–¥–µ–ª–∫–∞ –≤ <b>{'–õ–û–ù–ì' if trade.side else '–®–û–†–¢'}</b> "
                    f"–∑–∞–∫—Ä—ã—Ç–∞ {status_text}\n"
                    f"–¶–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è: <b>{order.price}</b>\n"
                    f"{'–ü—Ä–∏–±—ã–ª—å' if trade.result > 0 else '–£–±—ã—Ç–æ–∫'}: <b>{round(trade.result, 4)} USDT</b>"
                )

                try:
                    if trade.msg_id:
                        await tg.bot.send_message(
                            config['TG']['channel'],
                            text,
                            reply_to_message_id=trade.msg_id,
                            parse_mode='HTML'
                        )
                except Exception as e:
                    logging.error(f"{symbol}: –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

                positions.pop(symbol, None)
                print(f"–°–¥–µ–ª–∫–∞ –ø–æ {symbol} –∑–∞–∫—Ä—ã—Ç–∞.")





async def partial_close_and_move_stop(trade):
    global positions

    symbol = trade.symbol
    msgs = []
    portion = symbol_conf_cache.get(symbol).portion
    step_size = all_symbols[symbol].step_size
    min_qty = all_symbols[symbol].min_qty
    direction = "BUY" if trade.side else "SELL"
    close_side = "SELL" if direction == "BUY" else "BUY"
    entry_price = trade.entry_price
    tick_size = all_symbols[symbol].tick_size

    if trade.partial_exit_done:
        logging.info(f"{symbol}: —á–∞—Å—Ç–∏—á–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —Ä–∞–Ω–µ–µ, –ø—Ä–æ–ø—É—Å–∫.")
        return

    try:
        binance_positions = await client.get_position_risk(symbol=symbol)
        position_info = next((p for p in binance_positions if p["symbol"] == symbol), None)

        if not position_info:
            logging.warning(f"{symbol}: –ø–æ–∑–∏—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        position_amt = abs(float(position_info["positionAmt"]))
        if position_amt == 0:
            logging.warning(f"{symbol}: –ø–æ–∑–∏—Ü–∏—è —É–∂–µ –∑–∞–∫—Ä—ã—Ç–∞.")
            return

        qty = utils.round_down(trade.quantity * portion, step_size)

        if qty < min_qty:
            logging.warning(f"{symbol}: –æ–±—ä—ë–º {qty} –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –ª–æ—Ç–∞ {min_qty}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —á–∞—Å—Ç–∏—á–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ.")
            msgs.append(f"{symbol}: –æ–±—ä—ë–º ({qty}) –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –ª–æ—Ç–∞, —á–∞—Å—Ç–∏—á–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ.")
        else:
            portion_close_order = await client.new_order(
                symbol=symbol,
                side=close_side,
                type='MARKET',
                quantity=qty,
                reduceOnly=True
            )
            logging.info(f"{symbol}: —á–∞—Å—Ç–∏—á–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ {portion * 100:.1f}% –ø–æ–∑–∏—Ü–∏–∏ ({qty})")
            msgs.append(f"{symbol}: —á–∞—Å—Ç–∏—á–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ {portion * 100:.1f}% –ø–æ–∑–∏—Ü–∏–∏ ({qty})")

            async with session() as s:
                s.add(db.Orders(
                    order_id=portion_close_order['orderId'],
                    trade_id=trade.id,
                    symbol=symbol,
                    time=portion_close_order['updateTime'],
                    side=portion_close_order['side'] == 'BUY',
                    type=portion_close_order['type'],
                    status=portion_close_order['status'],
                    reduce=portion_close_order['reduceOnly'],
                    price=float(portion_close_order.get('avgPrice', 0)),
                    quantity=float(portion_close_order['executedQty'])
                ))
                await s.commit()

    except Exception as e:
        logging.error(f"{symbol}: –æ—à–∏–±–∫–∞ –ø—Ä–∏ MARKET-–∑–∞–∫—Ä—ã—Ç–∏–∏ —á–∞—Å—Ç–∏ –ø–æ–∑–∏—Ü–∏–∏: {e}")
        msgs.append(f"{symbol}: –æ—à–∏–±–∫–∞ –ø—Ä–∏ MARKET-–∑–∞–∫—Ä—ã—Ç–∏–∏ —á–∞—Å—Ç–∏ –ø–æ–∑–∏—Ü–∏–∏: {e}")
        return

    # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å—Ç–∞–≤—à–µ–π—Å—è –ø–æ–∑–∏—Ü–∏–∏ ---
    try:
        binance_positions = await client.get_position_risk(symbol=symbol)
        position_info = next((p for p in binance_positions if p["symbol"] == symbol), None)
        remaining_amt = abs(float(position_info["positionAmt"]))

        if remaining_amt == 0:
            logging.info(f"{symbol}: –ø–æ–∑–∏—Ü–∏—è –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–∫—Ä—ã—Ç–∞ –ø–æ—Å–ª–µ —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ –≤—ã—Ö–æ–¥–∞.")
            msgs.append(f"{symbol}: –ø–æ–∑–∏—Ü–∏—è –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–∫—Ä—ã—Ç–∞ –ø–æ—Å–ª–µ —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ –≤—ã—Ö–æ–¥–∞.")
            positions[symbol] = False
            return

        remaining_qty = utils.round_down(remaining_amt, step_size)
        new_stop = round(entry_price * (0.999 if direction == "BUY" else 1.001), tick_size)
        take2_price = trade.take2_price

        old_stop_order = await db.get_last_active_stop_order(trade.id)

        # --- –ù–æ–≤—ã–π —Å—Ç–æ–ø ---
        new_stop_order = await client.new_order(
            symbol=symbol,
            side=close_side,
            type='STOP_MARKET',
            stopPrice=new_stop,
            quantity=remaining_qty,
            reduceOnly=True
        )
        msgs.append(f"{symbol}: –Ω–æ–≤—ã–π —Å—Ç–æ–ø –≤ –ë–£ @ {new_stop}, –æ–±—ä—ë–º {remaining_qty}")
        logging.info(f"{symbol}: –Ω–æ–≤—ã–π —Å—Ç–æ–ø —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω @ {new_stop}, –æ–±—ä—ë–º {remaining_qty}")

        # --- –ù–æ–≤—ã–π —Ç–µ–π–∫2 ---
        new_take2_order = await client.new_order(
            symbol=symbol,
            side=close_side,
            type='LIMIT',
            price=take2_price,
            quantity=remaining_qty,
            timeInForce='GTC',
            reduceOnly=True
        )
        msgs.append(f"{symbol}: —Ç–µ–π–∫2 –æ–±–Ω–æ–≤–ª—ë–Ω @ {take2_price}, –æ–±—ä—ë–º {remaining_qty}")
        logging.info(f"{symbol}: —Ç–µ–π–∫2 –æ–±–Ω–æ–≤–ª—ë–Ω @ {take2_price}, –æ–±—ä—ë–º {remaining_qty}")

        # --- –û—Ç–º–µ–Ω–∞ —Å—Ç–∞—Ä–æ–≥–æ —Å—Ç–æ–ø–∞ ---
        if old_stop_order and old_stop_order.order_id != new_stop_order['orderId']:
            try:
                await client.cancel_order(symbol=symbol, orderId=old_stop_order.order_id)
                logging.info(f"{symbol}: —Å—Ç–∞—Ä—ã–π —Å—Ç–æ–ø-–æ—Ä–¥–µ—Ä {old_stop_order.order_id} –æ—Ç–º–µ–Ω—ë–Ω")
                msgs.append(f"{symbol}: —Å—Ç–∞—Ä—ã–π —Å—Ç–æ–ø-–æ—Ä–¥–µ—Ä –æ—Ç–º–µ–Ω—ë–Ω")

                async with session() as s:
                    old_stop_order.status = 'CANCELED'
                    s.add(old_stop_order)
                    await s.commit()
                    logging.info(f"{symbol}: –æ—Ç–º–µ–Ω—ë–Ω–Ω—ã–π —Å—Ç–æ–ø-–æ—Ä–¥–µ—Ä —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –ë–î —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º CANCELED.")
            except Exception as e:
                logging.error(f"{symbol}: –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —Å—Ç–∞—Ä–æ–≥–æ —Å—Ç–æ–ø–∞: {e}")
                msgs.append(f"{symbol}: –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —Å—Ç–∞—Ä–æ–≥–æ —Å—Ç–æ–ø–∞: {e}")

        # --- –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å—ë –≤ –ë–î ---
        async with session() as s:
            await s.execute(
                update(db.Trades).where(db.Trades.id == trade.id).values(
                    breakeven_stop_price=new_stop,
                    partial_exit_done=True
                )
            )

            for order in (new_stop_order, new_take2_order):
                s.add(db.Orders(
                    order_id=order['orderId'],
                    trade_id=trade.id,
                    symbol=symbol,
                    time=order['updateTime'],
                    side=order['side'] == 'BUY',
                    type=order['type'],
                    status=order['status'],
                    reduce=order['reduceOnly'],
                    price=float(order.get('stopPrice') or order.get('avgPrice') or 0),
                    quantity=float(order.get('executedQty') or order.get('origQty') or 0)
                ))

            await s.commit()
            logging.info(f"{symbol}: –Ω–æ–≤—ã–µ –æ—Ä–¥–µ—Ä–∞ –∏ —Ñ–ª–∞–≥–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î.")

        # --- –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ TG ---
        try:
            await tg.bot.send_message(
                config['TG']['channel'],
                f"<b>{symbol}</b>: —á–∞—Å—Ç–∏—á–Ω–æ –∑–∞–∫—Ä—ã—Ç–∞ –ø–æ–∑–∏—Ü–∏—è {portion*100:.0f}%\n"
                f"üîÅ –¢–µ–π–∫2 –æ–±–Ω–æ–≤–ª—ë–Ω: <b>{take2_price}</b>\n"
                f"üõ°Ô∏è –°—Ç–æ–ø –ø–µ—Ä–µ–¥–≤–∏–Ω—É—Ç –≤ –ë–£: <b>{new_stop}</b>",
                parse_mode='HTML'
            )
        except Exception as e:
            logging.warning(f"{symbol}: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ TG: {e}")

    except Exception as e:
        logging.error(f"{symbol}: –æ—à–∏–±–∫–∞ –≤ –±–ª–æ–∫–µ –ø–æ—Å—Ç-—á–∞—Å—Ç–∏—á–Ω–æ–≥–æ –≤—ã—Ö–æ–¥–∞: {e}")




if __name__ == '__main__':
    config = configparser.ConfigParser()
    config.read('config.ini')
    asyncio.run(main())










