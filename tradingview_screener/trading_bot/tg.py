import asyncio
import configparser
import binance
import db
import os
from aiogram import Bot, Dispatcher, F, types
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton,
    ReplyKeyboardMarkup, KeyboardButton)


# —Å–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot: Bot
dp = Dispatcher()
# –∑–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥
config = configparser.ConfigParser()
config.read('config.ini')
# –ø–∞—Ä—Å–∏–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤
tg_admins = list(map(int, config['TG']['admins'].split(',')))

# –æ–ø–∏—Å–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–∫
symbol_settings = {
    'interval': '–∏–Ω—Ç–µ—Ä–≤–∞–ª',
    'order_size': '—Ä–∞–∑–º–µ—Ä –æ—Ä–¥–µ—Ä–∞',
    'leverage': '–ø–ª–µ—á–æ',
    'atr_length': '–¥–ª–∏–Ω–∞ –¥–ª—è ATR',
    'take1': '—Ä–∞–∑–º–µ—Ä —Ç–µ–π–∫–∞1',
    'take2': '—Ä–∞–∑–º–µ—Ä —Ç–µ–π–∫–∞2',
    'stop': '—Ä–∞–∑–º–µ—Ä —Å—Ç–æ–ø–∞',
    'portion': '—á–∞—Å—Ç—å –ø–æ–∑–∏—Ü–∏–∏'
}

# —Å–ø–∏—Å–æ–∫ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
intervals = ['1m', '3m', '5m', '15m', '30m', '1h', '2h', '4h', '6h', '8h', '12h', '1d', '3d', '1w', '1M']

# –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ—Ç–æ—Ä—ã—Ö –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∂–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
symbol_reload = ['interval', 'take1', 'take2']


# —Ñ—É–Ω—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def run(_session, _client: binance.Futures, _connect_ws, _disconnect_ws, _subscribe_ws, _unsubscribe_ws):
    # –ø–µ—Ä–µ–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ —Ñ–∞–π–ª–∞ main
    global bot
    global dp
    global session
    global client
    global connect_ws
    global disconnect_ws
    global subscribe_ws
    global unsubscribe_ws
    session = _session
    client = _client
    connect_ws = _connect_ws
    disconnect_ws = _disconnect_ws
    subscribe_ws = _subscribe_ws
    unsubscribe_ws = _unsubscribe_ws
    # –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
    bot = Bot(token=config['TG']['token'], default=DefaultBotProperties(parse_mode='HTML'))
    # —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    await bot.delete_webhook(drop_pending_updates=True)
    try:
        # –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        await dp.start_polling(bot)
    finally:
        # –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é
        await bot.session.close()


# –∫–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –±–æ—Ç–∞
class States(StatesGroup):
    main_menu = State()
    positions = State()
    symbols = State()
    settings = State()
    edit_symbol = State()
    edit_symbol_status = State()
    add_symbol = State()
    delete_symbol = State()
    change_keys = State()
    restart = State()
    trade_mode = State()
    close_pos = State()


# —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∫–æ–ª–ª–±–µ–∫
async def answer(message: Message | CallbackQuery, text, reply_markup=None):
    if isinstance(message, CallbackQuery):
        await message.answer()
        message = message.message
    await message.answer(text, reply_markup=reply_markup)


# —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ –∫–æ–º–∞–Ω–¥ –æ—Ç –¥—Ä—É–≥–∏—Ö –ª—é–¥–µ–π (–Ω–µ –æ—Ç –∞–¥–º–∏–Ω–æ–≤)
@dp.message(~F.from_user.id.in_(tg_admins))
async def skip(_):
    pass


# –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@dp.message(Command("start", "menu"))
@dp.message(F.text == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def start(message: Message, state: FSMContext):
    # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.set_state(States.main_menu)
    # —Å–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    # keyboard = ReplyKeyboardMarkup(keyboard=[
    #     [KeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏"), KeyboardButton(text="–¢–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã")],
    #     [KeyboardButton(text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏"), KeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
    # ], resize_keyboard=True)
    # # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    # await answer(message, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=keyboard)

    keyboard = ReplyKeyboardMarkup(keyboard=[
        [KeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏"), KeyboardButton(text="–¢–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã")],
        [KeyboardButton(text="–ë–∞–ª–∞–Ω—Å"), KeyboardButton(text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏")],
        [KeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
    ], resize_keyboard=True)
     # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await answer(message, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=keyboard)



# —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã
@dp.message(F.text == "–¢–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã")
@dp.callback_query(F.data == "symbols")
async def list_symbols(message: Message | CallbackQuery, state: FSMContext):
    # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.set_state(States.symbols)
    # –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    symbols = await db.get_all_symbols()
    keyboard = []
    # —Å–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    for symbol in symbols:
        keyboard.append([InlineKeyboardButton(text=symbol.symbol, callback_data=f"symbol:{symbol.symbol}")])
    # –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä—ã
    keyboard.append([InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä—É", callback_data="add_symbol")])
    await answer(message, "–°–ø–∏—Å–æ–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä", reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard))




@dp.message(F.text == "–¢–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã")
async def handle_symbols_menu(message: Message, state: FSMContext):
    await state.set_state(States.symbols)

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤ –∏–∑ –±–∞–∑—ã
    symbols = await db.get_all_symbols()

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–µ—Ä–≤—ã–µ –±—É–∫–≤—ã/—Ü–∏—Ñ—Ä—ã
    first_chars = sorted(set(symbol.symbol[0].upper() for symbol in symbols))

    # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –ø–æ –±—É–∫–≤–∞–º
    keyboard = [
        [InlineKeyboardButton(text=char, callback_data=f"symbol_group:{char}")]
        for char in first_chars
    ]
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–≤—É—é –±—É–∫–≤—É –∏–ª–∏ —Ü–∏—Ñ—Ä—É:", reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard))






@dp.callback_query(F.data.startswith("symbol_group:"))
async def handle_symbol_group(callback: CallbackQuery, state: FSMContext):
    prefix = callback.data.split(":")[1].upper()
    symbols = await db.get_all_symbols()

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–µ—Ä–≤–æ–π –±—É–∫–≤–µ
    filtered = [s.symbol for s in symbols if s.symbol.upper().startswith(prefix)]

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –ø–æ–¥—Ö–æ–¥—è—â–∏–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏
    keyboard = [
        [InlineKeyboardButton(text=s, callback_data=f"symbol:{s}")]
        for s in filtered
    ]

    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –±—É–∫–≤—ã
    keyboard.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="symbols")])

    await callback.message.edit_text(f"–°–∏–º–≤–æ–ª—ã, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å ¬´{prefix}¬ª", reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard))



@dp.callback_query(F.data == "symbols")
async def return_to_symbol_menu(callback: CallbackQuery, state: FSMContext):
    symbols = await db.get_all_symbols()
    first_chars = sorted(set(symbol.symbol[0].upper() for symbol in symbols))

    keyboard = [
        [InlineKeyboardButton(text=char, callback_data=f"symbol_group:{char}")]
        for char in first_chars
    ]
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–≤—É—é –±—É–∫–≤—É –∏–ª–∏ —Ü–∏—Ñ—Ä—É:", reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard))








# –≤—ã–±–æ—Ä —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã
@dp.callback_query(F.data.startswith("symbol:"))
async def symbol(callback: CallbackQuery, state: FSMContext):
    # –ø–æ–ª—É—á–∞–µ–º —Ç–æ—Ä–≥–æ–≤—É—é –ø–∞—Ä—É –∏–∑ callback'–∞
    symbol = callback.data.split(':')[1]
    # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–æ—Ä–≥–æ–≤—É—é –ø–∞—Ä—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(symbol=symbol)
    # –≤—ã–≤–æ–¥–∏–º –º–µ–Ω—é –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä—ã
    await symbol_menu(callback, state, symbol)


# –º–µ–Ω—é –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä—ã
async def symbol_menu(message: Message | CallbackQuery, state: FSMContext, symbol):
    # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.set_state(States.symbols)
    # –ø–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã
    symbol_conf = await db.get_symbol_conf(symbol)
    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    text = (f"–¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞: <b>{symbol}</b>\n"
            f"–°—Ç–∞—Ç—É—Å: <b>{'–ê–∫—Ç–∏–≤–Ω–∞' if symbol_conf.status else '–ù–µ –∞–∫—Ç–∏–≤–Ω–∞'}</b>\n"
            f"–¢–∞–π–º—Ñ—Ä–µ–π–º: <b>{symbol_conf.interval}</b>\n"
            f"–†–∞–∑–º–µ—Ä –æ—Ä–¥–µ—Ä–∞: <b>{symbol_conf.order_size} USDT</b>\n"
            f"–ü–ª–µ—á–æ: <b>X{symbol_conf.leverage}</b>\n"
            f"–†–∞–∑–º–µ—Ä 1-–≥–æ —Ç–µ–π–∫–∞: <b>{symbol_conf.take1}</b> x ATR\n"
            f"–†–∞–∑–º–µ—Ä 2-–≥–æ —Ç–µ–π–∫–∞: <b>{symbol_conf.take2}</b> x ATR\n"
            f"–†–∞–∑–º–µ—Ä —Å—Ç–æ–ø–∞: <b>{symbol_conf.stop}</b> x ATR\n"
            f"–†–∞–∑–º–µ—Ä portion: <b>{symbol_conf.portion}</b> –æ—Ç –ø–æ–∑–∏—Ü–∏–∏"
            )
            


    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"{'–û—Ç–∫–ª—é—á–∏—Ç—å' if symbol_conf.status else '–í–∫–ª—é—á–∏—Ç—å'} —Ç–æ—Ä–≥–æ–≤–ª—é",
                              callback_data="edit_symbol_status")],
        [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="edit_symbol_settings")],
        [InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –ø–∞—Ä—É", callback_data="delete_symbol")],
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="symbols")]
    ])
    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await answer(message, text, reply_markup=keyboard)



# –º–µ–Ω—é –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä—ã
@dp.callback_query(States.symbols, F.data == "edit_symbol_settings")
async def edit_symbol_settings(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    keyboard = []
    for key, value in symbol_settings.items():
        keyboard.append([InlineKeyboardButton(text=f"–ò–∑–º–µ–Ω–∏—Ç—å {value}", callback_data=f"edit_symbol:{key}")])
    keyboard.append([InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data=f"symbol:{data['symbol']}")])
    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await answer(callback, "–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard))


# —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
@dp.callback_query(States.symbols, F.data.startswith("edit_symbol:"))
async def edit_symbol(callback: CallbackQuery, state: FSMContext):
    # –ø–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    key = callback.data.split(':')[1]
    # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.set_state(States.edit_symbol)
    # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(key=key)
    # –∑–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ –ø–∞—Ä—ã
    data = await state.get_data()
    symbol_conf = await db.get_symbol_conf(data['symbol'])
    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    text = (f"–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ {symbol_settings[key]}: <b>{getattr(symbol_conf, key)}</b>\n"
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
    await answer(callback, text)


# —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
@dp.message(States.edit_symbol)
async def edit_symbol_value(message: Message, state: FSMContext):
    # –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    data = await state.get_data()
    # –ø–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    symbol_conf = await db.get_symbol_conf(symbol=data['symbol'])
    symbol = data['symbol']
    key = data['key']
    # –ø–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    value = getattr(symbol_conf, key)
    # –∏ –µ—Å–ª–∏ –æ–Ω–æ –Ω–µ —Ä–∞–≤–Ω–æ None
    if value is not None:
        try:
            # –ø—Ä–æ–±—É–µ–º –ø—Ä–∏–≤–µ—Å—Ç–∏ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫ –Ω—É–∂–Ω–æ–º—É —Ç–∏–ø—É
            value = type(value)(message.text)
            # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –±–æ–ª—å—à–µ –Ω—É–ª—è (–µ—Å–ª–∏ —ç—Ç–æ —á–∏—Å–ª–æ)
            if type(value) in (int, float) and value <= 0:
                # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—à–∏–±–∫–æ–π
                await answer(message, "–ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è")
                return
        except:
            # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—à–∏–±–∫–æ–π
            await answer(message, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑")
            return
        match key:
            # –µ—Å–ª–∏ –º—ã –∏–∑–º–µ–Ω—è–µ–º –ø–ª–µ—á–æ
            case 'leverage':
                try:
                    # –ø—ã—Ç–∞–µ–º—Å—è –∏–∑–º–µ–Ω–∏—Ç—å –ø–ª–µ—á–æ –Ω–∞ –±–∏—Ä–∂–µ
                    await client.change_leverage(symbol, value)
                except Exception as e:
                    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—à–∏–±–∫–æ–π
                    await answer(message, f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –ø–ª–µ—á–æ:\n{e}")
                    return
            # –µ—Å–ª–∏ –º—ã –∏–∑–º–µ–Ω—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª
            case 'interval':
                # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤—Ö–æ–¥–∏—Ç –≤ —Å–ø–∏—Å–æ–∫ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
                if value not in intervals:
                    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—à–∏–±–∫–æ–π
                    await answer(message, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: " + ', '.join(intervals))
                    return
        # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        setattr(symbol_conf, key, value)
        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥ –ø–∞—Ä—ã
        await db.symbol_update(symbol_conf)

        if key in symbol_reload:
            # –µ—Å–ª–∏ –º—ã –∏–∑–º–µ–Ω–∏–ª–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª
            if key == 'interval':
                # –æ—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å—Ç—Ä–∏–º–∞
                await unsubscribe_ws(symbol)
                # –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –Ω–æ–≤—ã–π —Å—Ç—Ä–∏–º
                await subscribe_ws(symbol, symbol_conf.interval)


        # –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await answer(message, f"–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ {symbol_settings[key]} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: <b>{value}</b>")
        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω—é
        await symbol_menu(message, state, symbol)
    else:
        await answer(message, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑")


# –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏
@dp.callback_query(States.symbols, F.data == "edit_symbol_status")
async def edit_symbol_status(callback: CallbackQuery, state: FSMContext):
    # –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    data = await state.get_data()
    # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.set_state(States.edit_symbol_status)
    # –∑–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ –ø–∞—Ä—ã
    symbol_conf = await db.get_symbol_conf(symbol=data['symbol'])
    # —Å–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–î–∞", callback_data="edit_symbol_status_yes"),
         InlineKeyboardButton(text="–ù–µ—Ç", callback_data=f"symbol:{data['symbol']}")]
    ])
    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await answer(callback, f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ {'–æ—Ç–∫–ª—é—á–∏—Ç—å' if symbol_conf.status else '–≤–∫–ª—é—á–∏—Ç—å'} —Ç–æ—Ä–≥–æ–≤–ª—é"
                           f" –¥–ª—è –ø–∞—Ä—ã <b>{data['symbol']}</b>?", reply_markup=keyboard)


# –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏
@dp.callback_query(States.edit_symbol_status, F.data == "edit_symbol_status_yes")
async def edit_symbol_status_yes(callback: CallbackQuery, state: FSMContext):
    # –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    data = await state.get_data()
    symbol = data['symbol']
    # –∑–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ –ø–∞—Ä—ã
    symbol_conf = await db.get_symbol_conf(symbol=symbol)
    # –∏–∑–º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å
    symbol_conf.status = 0 if symbol_conf.status else 1
    # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –±–∞–∑—É
    await db.symbol_update(symbol_conf)
    # –æ—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç —Å—Ç—Ä–∏–º–∞, –µ—Å–ª–∏ —Ç–æ—Ä–≥–æ–≤–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∞
    if not symbol_conf.status:
        await unsubscribe_ws(symbol)

    # –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å—Ç—Ä–∏–º, –µ—Å–ª–∏ —Ç–æ—Ä–≥–æ–≤–ª—è –≤–∫–ª—é—á–µ–Ω–∞
    if symbol_conf.status:
        await subscribe_ws(symbol, symbol_conf.interval)
    await answer(callback, f"–¢–æ—Ä–≥–æ–≤–ª—è –¥–ª—è –ø–∞—Ä—ã <b>{symbol}</b> —É—Å–ø–µ—à–Ω–æ "
                           f"{'–≤–∫–ª—é—á–µ–Ω–∞' if symbol_conf.status else '–æ—Ç–∫–ª—é—á–µ–Ω–∞'}")
    await symbol_menu(callback, state, symbol)


# –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä—ã
@dp.callback_query(States.symbols, F.data == "add_symbol")
async def add_symbol(callback: CallbackQuery, state: FSMContext):
    # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.set_state(States.add_symbol)
    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await answer(callback, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞—Ä—ã")


# –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä—ã
@dp.message(States.add_symbol)
async def add_symbol_value(message: Message, state: FSMContext):
    # –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ –≤–µ—Ä—Ö–Ω–∏–∏ÃÜ —Ä–µ–≥–∏—Å—Ç—Ä
    symbol = message.text.upper()
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–∞—è –ø–∞—Ä–∞ –Ω–∞ –±–∏—Ä–∂–µ
    if symbol not in (await client.load_symbols()):
        # –µ—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        await answer(message, f"–¢–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã {symbol} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
        return
    # –¥–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await db.symbol_add(symbol)
    # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(symbol=symbol)
    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø—ã—Ç–∞–µ–º—Å—è –∏–∑–º–µ–Ω–∏—Ç—å –ø–ª–µ—á–æ –Ω–∞ –±–∏—Ä–∂–µ
    text = f"–¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ <b>{symbol}</b> —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞"
    try:
        await client.change_leverage(symbol, 20)
    except:
        text += f", –Ω–æ –ø–ª–µ—á–æ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–µ —É–¥–∞–ª–æ—Å—å"
    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await answer(message, text)
    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω—é
    await symbol_menu(message, state, symbol)


# —É–¥–∞–ª–µ–Ω–∏–µ –ø–∞—Ä—ã
@dp.callback_query(States.symbols, F.data == "delete_symbol")
async def delete_symbol(callback: CallbackQuery, state: FSMContext):
    # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.set_state(States.delete_symbol)
    # –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()
    # —Å–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–î–∞", callback_data="delete_symbol_yes"),
         InlineKeyboardButton(text="–ù–µ—Ç", callback_data=f"symbol:{data['symbol']}")]
    ])
    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await answer(callback, f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–∞—Ä—É <b>{data['symbol']}</b>?", reply_markup=keyboard)


# —É–¥–∞–ª–µ–Ω–∏–µ –ø–∞—Ä—ã
@dp.callback_query(States.delete_symbol, F.data == "delete_symbol_yes")
async def delete_symbol_yes(callback: CallbackQuery, state: FSMContext):
    # –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    data = await state.get_data()
    # –ø–æ–ª—É—á–∞–µ–º –ø–∞—Ä—É
    symbol = data['symbol']
    # —É–¥–∞–ª—è–µ–º –ø–∞—Ä—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    await db.symbol_delete(symbol)
    # –æ—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç —Å—Ç—Ä–∏–º–∞
    await unsubscribe_ws(symbol)

    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await answer(callback, f"–ü–∞—Ä–∞ <b>{symbol}</b> —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞")
    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω—é
    await list_symbols(callback, state)


# –∑–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–∑–∏—Ü–∏–π
async def get_positions():
    trades = {}
    # –∑–∞–≥—Ä—É–∂–∞–µ–º —Ç—Ä–µ–π–¥—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    for trade in (await db.get_open_trades()):
        # –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä—å
        trades[trade.symbol] = trade
    positions = []
    # –∑–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ —Å –±–∏—Ä–∂–∏
    for pos in (await client.get_position_risk()):
        # –≤—ã–±–∏—Ä–∞–µ–º —É –∫–æ—Ç–æ—Ä—ã—Ö —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –Ω–µ —Ä–∞–≤–µ–Ω –Ω—É–ª—é –∏ –æ–Ω–∏ –µ—Å—Ç—å –≤ –Ω–∞—à–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        if float(pos['positionAmt']) != 0 and pos['symbol'] in trades:
            # –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫
            positions.append(pos)
    # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    return positions, trades


# @dp.message(F.text == "–û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏")
# @dp.callback_query(F.data == "positions")
# async def open_positions(message: Message, state: FSMContext):
#     # –∑–∞–≥—Ä—É–∂–∞–µ–º –∫–æ—Ñ–∏–≥
#     conf = await db.load_config()
#     # –µ—Å–ª–∏ —Ç–æ—Ä–≥–æ–≤–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∞
#     if not conf.trade_mode:
#         # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
#         await answer(message, "–¢–æ—Ä–≥–æ–≤–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∞")
#         return
#     # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
#     await state.set_state(States.positions)
#     text = "–û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏:"
#     positions, trades = await get_positions()
#     for pos in positions:
#         size = float(pos['positionAmt'])
#         trade = trades[pos['symbol']]
#         # —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
#         text += (f"\n\n<b>{'–õ–û–ù–ì' if size > 0 else '–®–û–†–¢'}</b> <i>X{pos['leverage']}</i> #{pos['symbol']}\n"
#                  f"–†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: <b>{abs(size)}</b>\n"
#                  f"–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: <b>{pos['entryPrice']}</b>\n"
#                  f"–¢–µ–π–∫ 1: <b>{trade.take1_price}</b>\n"
#                  f"–¢–µ–π–∫ 2: <b>{trade.take2_price}</b>\n"
#                  f"–°—Ç–æ–ø: <b>{trade.stop_price}</b>\n"
#                  f"PNL: <b>{round(float(pos['unRealizedProfit']), 2)} USDT</b>")
#     # –µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–∏
#     if "\n" in text:
#         # —Å–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
#         keyboard = InlineKeyboardMarkup(inline_keyboard=[
#             [InlineKeyboardButton(text="–ó–∞–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é", callback_data="close_pos")],
#             [InlineKeyboardButton(text="–ó–∞–∫—Ä—ã—Ç—å –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏", callback_data="close_pos_all")],
#             [InlineKeyboardButton(text="–û–±–Ω–æ–≤–∏—Ç—å", callback_data="positions")]
#         ])
#         # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
#         await answer(message, text, reply_markup=keyboard)
#     else:
#         await answer(message, "–û—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π –Ω–µ—Ç")



#
# MAX_MESSAGE_LENGTH = 3000
#
# async def send_long_message(message_or_query, full_text, reply_markup=None):
#     for i in range(0, len(full_text), MAX_MESSAGE_LENGTH):
#         chunk = full_text[i:i + MAX_MESSAGE_LENGTH]
#         if i + MAX_MESSAGE_LENGTH >= len(full_text) and reply_markup:
#             await answer(message_or_query, chunk, reply_markup=reply_markup)
#         else:
#             await answer(message_or_query, chunk)



#
# @dp.message(F.text == "–û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏")
# @dp.callback_query(F.data == "positions")
# async def open_positions(message: Message, state: FSMContext):
#     conf = await db.load_config()
#     if not conf.trade_mode:
#         await answer(message, "–¢–æ—Ä–≥–æ–≤–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∞")
#         return
#
#     await state.set_state(States.positions)
#     text = "–û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏:"
#     positions, trades = await get_positions()
#
#     for pos in positions:
#         size = float(pos['positionAmt'])
#         symbol = pos['symbol']
#         entry_price = float(pos['entryPrice'])
#         leverage = int(pos['leverage'])
#         unrealized_pnl = float(pos['unRealizedProfit'])
#
#         trade = trades[pos['symbol']]
#         take1 = float(trade.take1_price)
#         take2 = float(trade.take2_price)
#         stop = float(trade.stop_price)
#
#         symbol_conf = await db.get_symbol_conf(symbol)
#         portion = float(symbol_conf.portion)
#
#
#         position_value = abs(size * entry_price)
#         own_funds = round(position_value / leverage, 2)
#
#         # PNL –ø—Ä–∏ —Ç–µ–π–∫–µ (–≤—Å–µ–≥–¥–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π)
#         pnl_take1 = portion * abs(size) * abs(entry_price - take1)
#         pnl_take2 = (1 - portion) * abs(size) * abs(entry_price - take2)
#         # pnl_total_take = round(pnl_take1 + pnl_take2, 2)
#
#         # PNL –ø—Ä–∏ —Å—Ç–æ–ø–µ (–≤—Å–µ–≥–¥–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π)
#         pnl_stop = - round(abs(size) * abs(entry_price - stop), 2)
#
#
#         price_info = await client.ticker_price(symbol)
#         current_price = float(price_info['price'])
#
#         text += (
#             f"\n\n<b>{'–õ–û–ù–ì' if size > 0 else '–®–û–†–¢'}</b> <i>X{leverage}</i> #{symbol}\n"
#             f"–†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: <b>{abs(size)}</b> ‚âà <b>{round(position_value, 2)} USDT</b>\n"
#             f"–°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞: <b>{own_funds} USDT</b>\n"
#             f"–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: <b>{entry_price}</b>\n"
#             f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: <b>{current_price}</b>\n"
#             f"{'-' * 30}\n"
#             f"–¢–µ–π–∫ 1: <b>{take1}</b> ‚ûú <i>PNL ‚âà {round(pnl_take1, 3)} USDT</i>\n"
#             f"–¢–µ–π–∫ 2: <b>{take2}</b> ‚ûú <i>PNL ‚âà {round(pnl_take2, 3)} USDT</i>\n"
#             f"–°—Ç–æ–ø: <b>{stop}</b> ‚ûú <i>PNL ‚âà {round(pnl_stop, 3)} USDT</i>\n"
#             f"{'-' * 30}\n"
#             f"–¢–µ–∫—É—â–∏–π PNL: <b>{round(unrealized_pnl, 3)} USDT</b>"
#         )
#
#     if "\n" in text:
#         keyboard = InlineKeyboardMarkup(inline_keyboard=[
#             [InlineKeyboardButton(text="–ó–∞–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é", callback_data="close_pos")],
#             [InlineKeyboardButton(text="–ó–∞–∫—Ä—ã—Ç—å –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏", callback_data="close_pos_all")],
#             [InlineKeyboardButton(text="–û–±–Ω–æ–≤–∏—Ç—å", callback_data="positions")]
#         ])
#         # await send_long_message(message, text, reply_markup=keyboard)
#         await answer(message, text, reply_markup=keyboard)
#     else:
#         await answer(message, "–û—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π –Ω–µ—Ç")

MAX_MESSAGE_LENGTH = 4000


@dp.message(F.text == "–û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏")
@dp.callback_query(F.data == "positions")
async def open_positions(message: Message, state: FSMContext):
    conf = await db.load_config()
    if not conf.trade_mode:
        await answer(message, "–¢–æ—Ä–≥–æ–≤–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∞")
        return

    await state.set_state(States.positions)
    positions, trades = await get_positions()

    if not positions:
        await answer(message, "–û—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π –Ω–µ—Ç")
        return

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ó–∞–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é", callback_data="close_pos")],
        [InlineKeyboardButton(text="–ó–∞–∫—Ä—ã—Ç—å –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏", callback_data="close_pos_all")],
        [InlineKeyboardButton(text="–û–±–Ω–æ–≤–∏—Ç—å", callback_data="positions")]
    ])

    blocks = ["<b>–û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏:</b>"]
    block = ""

    for pos in positions:
        size = float(pos['positionAmt'])
        if size == 0:
            continue

        symbol = pos['symbol']
        entry_price = float(pos['entryPrice'])
        leverage = int(pos['leverage'])
        unrealized_pnl = float(pos['unRealizedProfit'])

        trade = trades.get(pos['symbol'])
        if not trade:
            continue

        take1 = float(trade.take1_price)
        take2 = float(trade.take2_price)
        stop = float(trade.stop_price)

        symbol_conf = await db.get_symbol_conf(symbol)
        portion = float(symbol_conf.portion)

        position_value = abs(size * entry_price)
        own_funds = round(position_value / leverage, 2)
        pnl_take1 = portion * abs(size) * abs(entry_price - take1)
        pnl_take2 = (1 - portion) * abs(size) * abs(entry_price - take2)
        pnl_stop = - round(abs(size) * abs(entry_price - stop), 2)
        price_info = await client.ticker_price(symbol)
        current_price = float(price_info['price'])

        pos_text = (
            f"\n\n<b>{'–õ–û–ù–ì' if size > 0 else '–®–û–†–¢'}</b> <i>X{leverage}</i> #{symbol}\n"
            f"–†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: <b>{abs(size)}</b> ‚âà <b>{round(position_value, 2)} USDT</b>\n"
            f"–°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞: <b>{own_funds} USDT</b>\n"
            f"–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: <b>{entry_price}</b>\n"
            f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: <b>{current_price}</b>\n"
            f"{'-' * 30}\n"
            f"–¢–µ–π–∫ 1: <b>{take1}</b> ‚ûú <i>PNL ‚âà {round(pnl_take1, 3)} USDT</i>\n"
            f"–¢–µ–π–∫ 2: <b>{take2}</b> ‚ûú <i>PNL ‚âà {round(pnl_take2, 3)} USDT</i>\n"
            f"–°—Ç–æ–ø: <b>{stop}</b> ‚ûú <i>PNL ‚âà {round(pnl_stop, 3)} USDT</i>\n"
            f"{'-' * 30}\n"
            f"–¢–µ–∫—É—â–∏–π PNL: <b>{round(unrealized_pnl, 3)} USDT</b>"
        )

        # ‚õî –µ—Å–ª–∏ –±–ª–æ–∫ + –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç > –ª–∏–º–∏—Ç–∞, —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ç–∞—Ä—ã–π –∏ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π
        if len(block) + len(pos_text) > MAX_MESSAGE_LENGTH:
            blocks.append(block)
            block = pos_text
        else:
            block += pos_text

    if block:
        blocks.append(block)

    # ‚èé –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —á–∞—Å—Ç—å –ø–æ –æ—á–µ—Ä–µ–¥–∏
    for i, part in enumerate(blocks):
        if i == len(blocks) - 1:
            await answer(message, part, reply_markup=keyboard)
        else:
            await answer(message, part)
            await asyncio.sleep(1.0)


# –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
@dp.message(F.text == "–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
@dp.callback_query(F.data == "settings")
async def settings(message: Message, state: FSMContext):
    # –∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    conf = await db.load_config()
    # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.set_state(States.settings)
    # —Å–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"{'–û—Ç–∫–ª—é—á–∏—Ç—å' if conf.trade_mode else '–í–∫–ª—é—á–∏—Ç—å'} —Ç–æ—Ä–≥–æ–≤–ª—é",
                              callback_data="trade_mode")],
        [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –∫–ª—é—á–∏", callback_data="change_keys")],
        [InlineKeyboardButton(text="–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –±–æ—Ç–∞", callback_data="restart")]
    ])

    # keyboard = InlineKeyboardMarkup(inline_keyboard=[
    #     [InlineKeyboardButton(text=f"{'–û—Ç–∫–ª—é—á–∏—Ç—å' if conf.trade_mode else '–í–∫–ª—é—á–∏—Ç—å'} —Ç–æ—Ä–≥–æ–≤–ª—é",
    #                           callback_data="trade_mode")],
    #     [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –∫–ª—é—á–∏", callback_data="change_keys")],
    #     [InlineKeyboardButton(text="–ó–∞–ø—Ä–æ—Å–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="check_balance")],
    #     [InlineKeyboardButton(text="–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –±–æ—Ç–∞", callback_data="restart")]
    # ])

    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    api_key = f"{conf.api_key[:4]}...{conf.api_key[-4:]}" if conf.api_key else "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
    text = (f"–û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
            f"–¢–æ—Ä–≥–æ–≤–ª—è: <b>{'–í–∫–ª—é—á–µ–Ω–∞' if conf.trade_mode else '–û—Ç–∫–ª—é—á–µ–Ω–∞'}</b>\n"
            f"API KEY: <b>{api_key}</b>\n")
    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await answer(message, text, reply_markup=keyboard)


# –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫–ª—é—á–µ–π
@dp.callback_query(States.settings, F.data == "change_keys")
async def change_keys(callback: CallbackQuery, state: FSMContext):
    # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–ª—é—á–µ–π
    await state.set_state(States.change_keys)
    # –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
    await callback.answer()
    # –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º API KEY
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ API KEY:")


# —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–ª—é—á–µ–π
@dp.message(States.change_keys)
async def change_keys_value(message: Message, state: FSMContext):
    # –ø–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    data = await state.get_data()
    # –µ—Å–ª–∏ API KEY –µ—â–µ –Ω–µ –±—ã–ª –≤–≤–µ–¥–µ–Ω
    if not data.get('api_key'):
        # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º API KEY
        await state.update_data(api_key=message.text)
        # –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º SECRET KEY
        await answer(message, "–í–≤–µ–¥–∏—Ç–µ SECRET KEY:")
        # —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å API KEY
        await message.delete()
        return
    else:
        # –±–µ—Ä–µ–º API KEY –∏ SECRET KEY
        api_key, secret_key = data['api_key'], message.text
        # –ø—Ä–æ–±—É–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è —Å –Ω–∏–º–∏ –∫ –±–∏—Ä–∂–µ –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å
        tmp_client = binance.Futures(api_key, secret_key, asynced=True,
                                     testnet=config.getboolean('BOT', 'testnet'))
        try:
            # –¥–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ
            await tmp_client.account()
        except:
            # –µ—Å–ª–∏ –∫–ª—é—á–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã, –ø–∏—à–µ–º –æ–± —ç—Ç–æ–º
            await answer(message, f"–ö–ª—é—á–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑\n–í–≤–µ–¥–∏—Ç–µ API KEY:")
            # —É–¥–∞–ª—è–µ–º API KEY –∏–∑ –ø–∞–º—è—Ç–∏ (—á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –≤–≤–µ—Å—Ç–∏ –µ—â–µ —Ä–∞–∑)
            await state.update_data(api_key=None)
            return
        finally:
            # –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
            await tmp_client.close()
            # —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å SECRET KEY
            await message.delete()
        await db.config_update(api_key=api_key, api_secret=secret_key)
        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await answer(message, "–ö–ª—é—á–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞—é –±–æ—Ç–∞")
        # –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞—é –±–æ—Ç–∞
        await restart_yes(message, state)


@dp.callback_query(F.data == "restart")
async def restart(callback: CallbackQuery, state: FSMContext):
    # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
    await state.set_state(States.restart)
    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º —É–¥–∞–ª–µ–Ω–∏—è
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–î–∞ (–ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏)", callback_data=f"restart_yes")],
        [InlineKeyboardButton(text="–î–∞ (–ù–ï –∑–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏)", callback_data=f"restart_yes_no_close")],
        [InlineKeyboardButton(text="–ù–µ—Ç", callback_data="settings")]
    ])
    await callback.answer()
    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
    await callback.message.answer(f"–í—ã –¥–µ–∏ÃÜ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –±–æ—Ç–∞?", reply_markup=keyboard)


# —Ñ—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –±–æ—Ç–∞
@dp.callback_query(States.restart, F.data == "restart_yes")
async def restart_yes(callback: CallbackQuery | Message, state: FSMContext):
    try:
        # –∑–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏
        await close_position()
        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ
        await callback.message.answer('–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞...')
    finally:
        # –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –±–æ—Ç–∞ (–ø—Ä–æ—Å—Ç–æ –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å, systemd –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ —Å–∞–º –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç —Å–µ—Ä–≤–∏—Å)
        os._exit(0)


# —Ñ—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –±–æ—Ç–∞
@dp.callback_query(States.restart, F.data == "restart_yes_no_close")
async def restart_yes(callback: CallbackQuery | Message, state: FSMContext):
    try:

        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ
        await callback.message.answer('–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞...')
    finally:
        # –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –±–æ—Ç–∞ (–ø—Ä–æ—Å—Ç–æ –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å, systemd –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ —Å–∞–º –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç —Å–µ—Ä–≤–∏—Å)
        os._exit(0)


@dp.callback_query(F.data == "trade_mode")
async def trade_mode(callback: CallbackQuery, state: FSMContext):
    # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
    await state.set_state(States.trade_mode)
    # –∑–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥
    conf = await db.load_config()
    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º —É–¥–∞–ª–µ–Ω–∏—è
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–î–∞", callback_data=f"trade_mode_yes")],
        [InlineKeyboardButton(text="–ù–µ—Ç", callback_data="settings")]
    ])
    await callback.answer()
    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
    await callback.message.answer(f"–í—ã –¥–µ–∏ÃÜ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ {'–≤–∫–ª—é—á–∏—Ç—å' if not conf.trade_mode else '–æ—Ç–∫–ª—é—á–∏—Ç—å'} "
                                  f"—Ç–æ—Ä–≥–æ–≤–ª—é?", reply_markup=keyboard)


# —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω–∏—è –∏–ª–∏ –≤—ã–∫–ª—é—á–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏
@dp.callback_query(States.trade_mode, F.data == "trade_mode_yes")
async def trade_mode_yes(callback: CallbackQuery, state: FSMContext):
    # –∑–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥
    conf = await db.load_config()
    # –≤–∫–ª—é—á–∞–µ–º –∏–ª–∏ –≤—ã–∫–ª—é—á–∞–µ–º —Ç–æ—Ä–≥–æ–≤–ª—é
    conf.trade_mode = 0 if conf.trade_mode else 1
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É –Ω–∞—Å –∫–ª—é—á–∏ (–µ—Å–ª–∏ –º—ã –ø—ã—Ç–∞–µ–º—Å—è –≤–∫–ª—é—á–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é)
    if conf.trade_mode and (not conf.api_key or not conf.api_secret):
        # –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
        await callback.answer()
        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        await callback.message.answer("–î–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ API KEY –∏ SECRET KEY")
        return
    # –æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥
    await db.config_update(trade_mode=str(conf.trade_mode))
    if conf.trade_mode:
        # –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –≤–µ–±—Å–æ–∫–µ—Ç–∞–º
        await connect_ws()
    else:
        # –∑–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏
        await close_position()
        # –æ—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç –≤–µ–±—Å–æ–∫–µ—Ç–æ–≤
        await disconnect_ws()
    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback.answer('–¢–æ—Ä–≥–æ–≤–ª—è –≤–∫–ª—é—á–µ–Ω–∞' if conf.trade_mode else '–¢–æ—Ä–≥–æ–≤–ª—è –≤—ã–∫–ª—é—á–µ–Ω–∞')
    # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
    await settings(callback.message, state)


# –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏
@dp.callback_query(F.data == "close_pos")
async def close_pos(callback: CallbackQuery, state: FSMContext):
    # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–π
    await state.set_state(States.close_pos)
    # –ø–æ–ª—É—á–∞–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏
    positions, _ = await get_positions()
    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏
    keyboard = []
    for pos in positions:
        keyboard.append([InlineKeyboardButton(text=pos['symbol'], callback_data=f"close_pos_yes:{pos['symbol']}")])
    keyboard.append([InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="positions")])
    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –∑–∞–∫—Ä—ã—Ç–∏—è –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard)
    await callback.answer()
    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
    await callback.message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—Ä–≥–æ–≤—É—é –ø–∞—Ä—É, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫—Ä—ã—Ç—å", reply_markup=keyboard)


# –∑–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π
@dp.callback_query(F.data == "close_pos_all")
async def close_pos_all(callback: CallbackQuery, state: FSMContext):
    # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–π
    await state.set_state(States.close_pos)
    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –∑–∞–∫—Ä—ã—Ç–∏—è –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–î–∞", callback_data=f"close_pos_yes:all")],
        [InlineKeyboardButton(text="–ù–µ—Ç", callback_data="positions")]
    ])
    await callback.answer()
    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
    await callback.message.answer(f"–í—ã –¥–µ–∏ÃÜ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã—Ç—å –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏?", reply_markup=keyboard)

# —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏
@dp.callback_query(States.close_pos, F.data.startswith("close_pos_yes:"))
async def close_pos_yes(callback: CallbackQuery, state: FSMContext):
    # –ø–æ–ª—É—á–∞–µ–º —Å–∏–º–≤–æ–ª —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã
    symbol = callback.data.split(":")[1]
    # –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –∑–∞–∫—Ä—ã—Ç—å –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏
    if symbol == 'all':
        await callback.answer("–ó–∞–∫—Ä—ã–≤–∞—é –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏")
        # –∑–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏
        await close_position()
    # –µ—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É –ø–æ–∑–∏—Ü–∏—é
    else:
        await callback.answer(f"–ó–∞–∫—Ä—ã–≤–∞—é –ø–æ–∑–∏—Ü–∏—é –ø–æ –ø–∞—Ä–µ {symbol}")
        # –∑–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
        await close_position(symbol)
    # –≤—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π
    await open_positions(callback.message, state)


# —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏
async def close_position(symbol=None):
    # –ø–æ–ª—É—á–∞–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏
    positions, _ = await get_positions()
    # –ø–µ—Ä–µ–±–∏—Ä–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏
    tasks = []
    for pos in positions:
        # –µ—Å–ª–∏ –ø–∞—Ä–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –∑–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏, –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
        if not symbol or pos['symbol'] == symbol:
            # —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
            pos_amt = float(pos['positionAmt'])
            # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è (BUY –∏–ª–∏ SELL)
            side = 'SELL' if pos_amt > 0 else 'BUY'
            # —Å–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏
            tasks.append(asyncio.create_task(close_pos_order(pos['symbol'], side, abs(pos_amt))))
    # –æ–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
    await asyncio.gather(*tasks)


# —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏
async def close_pos_order(symbol, side, qty):
    # —Å–æ–∑–¥–∞–µ–º —Ä—ã–Ω–æ—á–Ω—ã–π –æ—Ä–¥–µ—Ä –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏
    await client.new_order(symbol=symbol, side=side, type='MARKET', quantity=qty, reduceOnly="True")


# @dp.callback_query(F.data == "check_balance")
# async def check_balance(callback: CallbackQuery, state: FSMContext):
#     await callback.answer()  # –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–ø–∏–Ω–Ω–µ—Ä
#     try:
#         balances = await client.balance()
#         usdt_balances = [b for b in balances if b['asset'] == 'USDT']
#         text = "<b>–ë–∞–ª–∞–Ω—Å USDT:</b>\n"
#
#         if usdt_balances:
#             b = usdt_balances[0]
#             text += (
#                 f"–û–±—â–∏–π: <b>{b['balance']}</b>\n"
#                 f"–î–æ—Å—Ç—É–ø–Ω–æ: <b>{b['availableBalance']}</b>\n"
#                 f"–í –æ—Ä–¥–µ—Ä–∞—Ö: <b>{float(b['balance']) - float(b['availableBalance']):.4f}</b>"
#             )
#         else:
#             text += "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ USDT."
#
#         await callback.message.answer(text)
#     except Exception as e:
#         await callback.message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –±–∞–ª–∞–Ω—Å–∞: {e}")

@dp.message(F.text == "–ë–∞–ª–∞–Ω—Å")
async def show_balance(message: Message):
    try:
        balances = await client.balance()
        usdt_balances = [b for b in balances if b['asset'] == 'USDT']
        text = "<b>–ë–∞–ª–∞–Ω—Å USDT:</b>\n"

        if usdt_balances:
            b = usdt_balances[0]
            text += (
                f"–û–±—â–∏–π: <b>{b['balance']}</b>\n"
                f"–î–æ—Å—Ç—É–ø–Ω–æ: <b>{b['availableBalance']}</b>\n"
                f"–í –æ—Ä–¥–µ—Ä–∞—Ö: <b>{float(b['balance']) - float(b['availableBalance']):.4f}</b>"
            )
        else:
            text += "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ USDT."
    except Exception as e:
        text = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞:\n<code>{e}</code>"

    await message.answer(text)


